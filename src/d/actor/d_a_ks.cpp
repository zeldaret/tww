//
// Generated by dtk
// Translation Unit: d_a_ks.cpp
//

#include "d/actor/d_a_ks.h"
#include "d/d_procname.h"
#include "d/d_com_inf_game.h"
#include "d/d_s_play.h"
#include "f_op/f_op_camera.h"
#include "d/d_snap.h"


/* 00000078-000002CC       .text draw_SUB__FP8ks_class */
void draw_SUB(ks_class* i_this) {
    J3DModel* pJVar6 = i_this->m2B4->getModel();
    J3DModel* pJVar5 = i_this->m2B8->getModel();

    cXyz local_24 = dComIfGp_getCamera(0)->mLookat.mEye - i_this->current.pos;

    int iVar3 = cM_atan2s(local_24.x, local_24.z);
    int iVar4 = (s16)-cM_atan2s(local_24.y, std::sqrtf(local_24.x * local_24.x + local_24.z * local_24.z));
    
    f32 fVar1 = 0.0f;
    if (i_this->m2D0) {
        fVar1 = i_this->m304;
    }

    mDoMtx_trans(mDoMtx_stack_c::get(), i_this->current.pos.x, i_this->current.pos.y + fVar1, i_this->current.pos.z);
    
    mDoMtx_YrotM(mDoMtx_stack_c::get(), iVar3);
    mDoMtx_XrotM(mDoMtx_stack_c::get(), iVar4);
    mDoMtx_ZrotM(mDoMtx_stack_c::get(), i_this->shape_angle.z + i_this->m2FA.x);

    cXyz local_18;
    local_18.setall(1.0f);

    i_this->m2FA.x += i_this->m2FA.z;

    mDoMtx_stack_c::scaleM(1.0f,1.0f,1.0f);

    mDoMtx_ZrotM(mDoMtx_stack_c::get(), i_this->shape_angle.z - i_this->m2FA.x);

    pJVar6->setBaseTRMtx(mDoMtx_stack_c::get());

    mDoMtx_trans(mDoMtx_stack_c::get(), i_this->current.pos.x, i_this->current.pos.y + fVar1, i_this->current.pos.z);

    mDoMtx_YrotM(mDoMtx_stack_c::get(), i_this->shape_angle.y);
    mDoMtx_XrotM(mDoMtx_stack_c::get(), i_this->shape_angle.x);
    mDoMtx_ZrotM(mDoMtx_stack_c::get(), i_this->shape_angle.z);

    mDoMtx_stack_c::scaleM(local_18);

    pJVar5->setBaseTRMtx(mDoMtx_stack_c::get());

    enemy_fire(&i_this->mA60);
}

/* 000002CC-00000568       .text daKS_Draw__FP8ks_class */
static BOOL daKS_Draw(ks_class* i_this) {
    cXyz local_24 = i_this->current.pos - dComIfGp_getCamera(0)->mLookat.mEye;

    if (local_24.abs() < REG0_F(10) + 100.0f) {
        return TRUE;
    }

    J3DModel* pJVar3 = i_this->m2B4->getModel();
    J3DModel* pJVar2 = i_this->m2B8->getModel();

    cXyz local_18 = i_this->current.pos;
    local_18.y += 40.0f;

    dSnap_RegistFig(0xb3, i_this, 1.0f, 1.0f, 1.0f);

    if (i_this->m2C8 == 6) {
        return TRUE;
    }

    if (i_this->m2D0 == 0 && i_this->m2CD == 0) {
        draw_SUB(i_this);
    }

    i_this->m2CD = 0;

    g_env_light.settingTevStruct(TEV_TYPE_ACTOR, &i_this->current.pos, &i_this->tevStr);
    g_env_light.setLightTevColorType(pJVar3, &i_this->tevStr);

    i_this->m2C0->entry(pJVar3->getModelData());
    i_this->m2C0->setFrame(i_this->m320);

    i_this->m2B4->updateDL();

    i_this->m2C0->remove(pJVar3->getModelData());
    
    g_env_light.setLightTevColorType(pJVar2, &i_this->tevStr);
    
    i_this->m2BC->entry(pJVar2->getModelData());
    i_this->m2BC->setFrame(i_this->m302);

    i_this->m2C4->entry(pJVar2->getModelData());
    i_this->m2C4->setFrame(i_this->m320);

    i_this->m2B8->updateDL();

    i_this->m2C4->remove(pJVar2->getModelData());
    i_this->m2BC->remove(pJVar2->getModelData());
    
    return TRUE;
}

/* 00000568-0000074C       .text naraku_check__FP8ks_class */
void naraku_check(ks_class*) {
    /* Nonmatching */
}

/* 0000074C-00000788       .text tyaku_check__FP8ks_class */
void tyaku_check(ks_class*) {
    /* Nonmatching */
}

/* 00000788-0000087C       .text ks_kuttuki_check__FP8ks_class */
void ks_kuttuki_check(ks_class*) {
    /* Nonmatching */
}

/* 0000087C-000008F4       .text gm_birth_delet__FP8ks_class */
void gm_birth_delet(ks_class*) {
    /* Nonmatching */
}

/* 000008F4-00000A98       .text shock_damage_check__FP8ks_class */
void shock_damage_check(ks_class*) {
    /* Nonmatching */
}

/* 00000A98-00000DE8       .text body_atari_check__FP8ks_class */
void body_atari_check(ks_class*) {
    /* Nonmatching */
}

/* 00000DE8-00000EBC       .text speed_keisan__FP8ks_classs */
void speed_keisan(ks_class*, short) {
    /* Nonmatching */
}

/* 00000EBC-00001314       .text action_dousa_move__FP8ks_class */
void action_dousa_move(ks_class*) {
    /* Nonmatching */
}

/* 00001314-00001630       .text action_kougeki_move__FP8ks_class */
void action_kougeki_move(ks_class*) {
    /* Nonmatching */
}

/* 00001630-00001874       .text action_kaze_move__FP8ks_class */
void action_kaze_move(ks_class*) {
    /* Nonmatching */
}

/* 00001874-00001A14       .text dead_eff_set__FP8ks_classP4cXyz */
void dead_eff_set(ks_class*, cXyz*) {
    /* Nonmatching */
}

/* 00001A14-00001C5C       .text action_dead_move__FP8ks_class */
void action_dead_move(ks_class*) {
    /* Nonmatching */
}

/* 00001C5C-000026DC       .text action_omoi__FP8ks_class */
void action_omoi(ks_class*) {
    /* Nonmatching */
}

/* 000026DC-000027A0       .text tsubo_search__FPvPv */
void tsubo_search(void*, void*) {
    /* Nonmatching */
}

/* 000027A0-00002A40       .text action_tubo_search__FP8ks_class */
void action_tubo_search(ks_class*) {
    /* Nonmatching */
}

/* 00002A40-00002BC4       .text action_kb_birth_check__FP8ks_class */
void action_kb_birth_check(ks_class*) {
    /* Nonmatching */
}

/* 00002BC4-00002C54       .text BG_check__FP8ks_class */
void BG_check(ks_class*) {
    /* Nonmatching */
}

/* 00002C54-00003054       .text daKS_Execute__FP8ks_class */
static BOOL daKS_Execute(ks_class*) {
    /* Nonmatching */
}

/* 00003054-0000305C       .text daKS_IsDelete__FP8ks_class */
static BOOL daKS_IsDelete(ks_class*) {
    /* Nonmatching */
}

/* 0000305C-000030F4       .text daKS_Delete__FP8ks_class */
static BOOL daKS_Delete(ks_class*) {
    /* Nonmatching */
}

/* 000030F4-000034B0       .text useHeapInit__FP10fopAc_ac_c */
static BOOL useHeapInit(fopAc_ac_c*) {
    /* Nonmatching */
}

/* 000034F8-00003A94       .text daKS_Create__FP10fopAc_ac_c */
static cPhs_State daKS_Create(fopAc_ac_c*) {
    /* Nonmatching */
}

static actor_method_class l_daKS_Method = {
    (process_method_func)daKS_Create,
    (process_method_func)daKS_Delete,
    (process_method_func)daKS_Execute,
    (process_method_func)daKS_IsDelete,
    (process_method_func)daKS_Draw,
};

actor_process_profile_definition g_profile_KS = {
    /* LayerID      */ fpcLy_CURRENT_e,
    /* ListID       */ 0x0007,
    /* ListPrio     */ fpcPi_CURRENT_e,
    /* ProcName     */ PROC_KS,
    /* Proc SubMtd  */ &g_fpcLf_Method.base,
    /* Size         */ sizeof(ks_class),
    /* SizeOther    */ 0,
    /* Parameters   */ 0,
    /* Leaf SubMtd  */ &g_fopAc_Method.base,
    /* Priority     */ 0x00C0,
    /* Actor SubMtd */ &l_daKS_Method,
    /* Status       */ fopAcStts_CULL_e | fopAcStts_UNK40000_e,
    /* Group        */ fopAc_ENV_e,
    /* CullType     */ fopAc_CULLBOX_CUSTOM_e,
};
