//
// Generated by dtk
// Translation Unit: d_a_ks.cpp
//

#include "d/actor/d_a_ks.h"
#include "d/d_procname.h"
#include "d/d_com_inf_game.h"
#include "d/d_s_play.h"
#include "f_op/f_op_camera.h"
#include "d/d_snap.h"
#include "d/actor/d_a_player_main.h"

#include "weak_bss_936_to_1036.h" // IWYU pragma: keep

int KS_ALL_COUNT;
int KUTTUKU_ALL_COUNT;
int HEAVY_IN;
int GORON_COUNT;


/* 00000078-000002CC       .text draw_SUB__FP8ks_class */
void draw_SUB(ks_class* i_this) {
    J3DModel* pJVar6 = i_this->m2B4->getModel();
    J3DModel* pJVar5 = i_this->m2B8->getModel();

    cXyz local_24 = dComIfGp_getCamera(0)->mLookat.mEye - i_this->current.pos;

    int iVar3 = cM_atan2s(local_24.x, local_24.z);
    int iVar4 = (s16)-cM_atan2s(local_24.y, std::sqrtf(local_24.x * local_24.x + local_24.z * local_24.z));
    
    f32 fVar1 = 0.0f;
    if (i_this->m2D0) {
        fVar1 = i_this->m304;
    }

    mDoMtx_trans(mDoMtx_stack_c::get(), i_this->current.pos.x, i_this->current.pos.y + fVar1, i_this->current.pos.z);
    
    mDoMtx_YrotM(mDoMtx_stack_c::get(), iVar3);
    mDoMtx_XrotM(mDoMtx_stack_c::get(), iVar4);
    mDoMtx_ZrotM(mDoMtx_stack_c::get(), i_this->shape_angle.z + i_this->m2FA.x);

    cXyz local_18;
    local_18.setall(1.0f);

    i_this->m2FA.x += i_this->m2FA.z;

    mDoMtx_stack_c::scaleM(1.0f,1.0f,1.0f);

    mDoMtx_ZrotM(mDoMtx_stack_c::get(), i_this->shape_angle.z - i_this->m2FA.x);

    pJVar6->setBaseTRMtx(mDoMtx_stack_c::get());

    mDoMtx_trans(mDoMtx_stack_c::get(), i_this->current.pos.x, i_this->current.pos.y + fVar1, i_this->current.pos.z);

    mDoMtx_YrotM(mDoMtx_stack_c::get(), i_this->shape_angle.y);
    mDoMtx_XrotM(mDoMtx_stack_c::get(), i_this->shape_angle.x);
    mDoMtx_ZrotM(mDoMtx_stack_c::get(), i_this->shape_angle.z);

    mDoMtx_stack_c::scaleM(local_18);

    pJVar5->setBaseTRMtx(mDoMtx_stack_c::get());

    enemy_fire(&i_this->mEnemyFire);
}

/* 000002CC-00000568       .text daKS_Draw__FP8ks_class */
static BOOL daKS_Draw(ks_class* i_this) {
    cXyz local_24 = i_this->current.pos - dComIfGp_getCamera(0)->mLookat.mEye;

    if (local_24.abs() < REG0_F(10) + 100.0f) {
        return TRUE;
    }

    J3DModel* pJVar3 = i_this->m2B4->getModel();
    J3DModel* pJVar2 = i_this->m2B8->getModel();

    cXyz local_18 = i_this->current.pos;
    local_18.y += 40.0f;

    dSnap_RegistFig(0xb3, i_this, 1.0f, 1.0f, 1.0f);

    if (i_this->m2C8 == 6) {
        return TRUE;
    }

    if (i_this->m2D0 == 0 && i_this->m2CD == 0) {
        draw_SUB(i_this);
    }

    i_this->m2CD = 0;

    g_env_light.settingTevStruct(TEV_TYPE_ACTOR, &i_this->current.pos, &i_this->tevStr);
    g_env_light.setLightTevColorType(pJVar3, &i_this->tevStr);

    i_this->m2C0->entry(pJVar3->getModelData());
    i_this->m2C0->setFrame(i_this->m320);

    i_this->m2B4->updateDL();

    i_this->m2C0->remove(pJVar3->getModelData());
    
    g_env_light.setLightTevColorType(pJVar2, &i_this->tevStr);
    
    i_this->m2BC->entry(pJVar2->getModelData());
    i_this->m2BC->setFrame(i_this->m302);

    i_this->m2C4->entry(pJVar2->getModelData());
    i_this->m2C4->setFrame(i_this->m320);

    i_this->m2B8->updateDL();

    i_this->m2C4->remove(pJVar2->getModelData());
    i_this->m2BC->remove(pJVar2->getModelData());
    
    return TRUE;
}

/* 00000568-0000074C       .text naraku_check__FP8ks_class */
void naraku_check(ks_class*) {
    /* Nonmatching */
}

/* 0000074C-00000788       .text tyaku_check__FP8ks_class */
BOOL tyaku_check(ks_class* i_this) {
    if (i_this->mAcch.ChkGroundHit()) {
        return TRUE;
    }

    if (i_this->mAcch.ChkWaterIn()) {
        i_this->speed.y = 0.0f;
        i_this->gravity = 0.0f;
        return TRUE;
    }

    return FALSE;
}

/* 00000788-0000087C       .text ks_kuttuki_check__FP8ks_class */
BOOL ks_kuttuki_check(ks_class* i_this) {        
    fopAc_ac_c* mAtHitAc;    
    if (i_this->mSph.ChkAtHit() && !i_this->mSph.ChkAtShieldHit() && (mAtHitAc = i_this->mSph.GetAtHitAc(), mAtHitAc) && mAtHitAc == dComIfGp_getLinkPlayer() && KUTTUKU_ALL_COUNT >= 0 && KUTTUKU_ALL_COUNT < 0x14 && GORON_COUNT == 0) {
        i_this->mSph.OffTgSetBit();
        i_this->mSph.ClrCoSet();
        i_this->mSph.ClrTgHit();

        if (i_this->m2CF) {
            i_this->m2CF = 0;
            i_this->m52C.end();
        }
        
        i_this->m2CB = 4;
        i_this->m2CC = 0x28;

        return TRUE;
    }
    else {
        return FALSE;
    }
}

/* 0000087C-000008F4       .text gm_birth_delet__FP8ks_class */
void gm_birth_delet(ks_class*) {
    /* Nonmatching */
}

/* 000008F4-00000A98       .text shock_damage_check__FP8ks_class */
BOOL shock_damage_check(ks_class* i_this) {
    daPy_lk_c* link = daPy_getPlayerLinkActorClass();

    if (link->checkHammerQuake()) {
        cXyz mSwordTopPos = link->getSwordTopPos();

        mSwordTopPos.x -= i_this->current.pos.x;
        mSwordTopPos.y -= i_this->current.pos.y;
        mSwordTopPos.z -= i_this->current.pos.z;
        
        float distXZ = std::sqrtf(mSwordTopPos.x * mSwordTopPos.x + mSwordTopPos.z * mSwordTopPos.z);
        
        if (distXZ < 200.0f) {
            if (std::sqrtf(mSwordTopPos.y * mSwordTopPos.y) < 40.0f) {
                i_this->m2CB = 3;
                i_this->m2CC = 0x20;
                return TRUE;
            }
        }
    }
    return FALSE;
}

/* 00000A98-00000DE8       .text body_atari_check__FP8ks_class */
BOOL body_atari_check(ks_class* i_this) {
    cXyz mTgHitPos;
    cXyz mParticleScale;
    
    i_this->mGStts.Move();
    
    if (i_this->mSph.ChkTgHit()) {
        daPy_py_c* mpCurPlayerActor = daPy_getPlayerActorClass();

        cCcD_Obj* mTgHitObj = i_this->mSph.GetTgHitObj();

        mTgHitPos = *i_this->mSph.GetTgHitPosP();

        if (!mTgHitObj) {
            return FALSE;
        }

        i_this->current.angle.y = fopAcM_searchActorAngleY(i_this, dComIfGp_getPlayer(0)) + 0x8000;
        
        i_this->m2CB = 3;

        switch (mTgHitObj->GetAtType()) {
            case AT_TYPE_WIND: {
                i_this->current.angle.y = cM_atan2s(i_this->current.pos.x - mTgHitPos.x, i_this->current.pos.z - mTgHitPos.z);
                
                i_this->m2CB = 2;

                i_this->m2CC = 20;
                
                return FALSE;
            }
            case AT_TYPE_UNK8: {
                i_this->m2CC = 0x20;
                
                i_this->health = 0;
                
                i_this->m2CC = 30;
                
                return FALSE;
            }
            case AT_TYPE_SWORD: {
                if (i_this->m2CC != 43 || i_this->m2CE) {
                    dScnPly_ply_c::setPauseTimer(2);
                    
                    i_this->stealItemBitNo = 1;
                }
                
                mParticleScale.setall(REG8_F(0) + 0.8f);
                
                dComIfGp_particle_set(dPa_name::ID_COMMON_NORMAL_HIT, &mTgHitPos, &mpCurPlayerActor->shape_angle, &mParticleScale);
                
                break;
            }
            case AT_TYPE_SKULL_HAMMER: {
                if (mpCurPlayerActor->getCutType() == 0x12 || mpCurPlayerActor->getCutType() == 0x13) {
                    i_this->speedF = 0.0f;

                    i_this->gravity = 0.0f;

                    i_this->speed.setall(0.0f);

                    i_this->health = 0;

                    dScnPly_ply_c::setPauseTimer(2);

                    i_this->stealItemBitNo = 1;

                    i_this->m2CC = 0x20;

                    return TRUE;
                }

                break;
            }
            case AT_TYPE_FIRE:
            case AT_TYPE_FIRE_ARROW: {
                i_this->mEnemyFire.mFireDuration = 100;

                break;
            }
            case AT_TYPE_ICE_ARROW: {
                i_this->mEnemyIce.mFreezeDuration = 200;

                i_this->m2D0 = 1;

                i_this->mEnemyIce.mParticleScale = 0.2f;

                i_this->mEnemyIce.mYOffset = 0.0f;

                enemy_fire_remove(&i_this->mEnemyFire);

                break;
            }
            case AT_TYPE_LIGHT_ARROW: {
                i_this->mEnemyIce.mLightShrinkTimer = 1;

                i_this->mEnemyIce.mParticleScale = 0.2f;

                i_this->mEnemyIce.mYOffset = 0.0f;

                i_this->m2D0 = 1;

                break;
            }
            default: {
                mParticleScale.setall(REG8_F(0) + 0.8f);

                dComIfGp_particle_set(dPa_name::ID_COMMON_NORMAL_HIT, &mTgHitPos, &mpCurPlayerActor->shape_angle, &mParticleScale);
            }
        }

        i_this->health = 0;

        i_this->m2CC = 30;

        return TRUE;
    }
    else {
        return shock_damage_check(i_this) ? 1 : 0;
    }
}

/* 00000DE8-00000EBC       .text speed_keisan__FP8ks_classs */
void speed_keisan(ks_class* i_this, short i_speed) {
    cMtx_YrotS(*calc_mtx, i_speed);
    
    s16 sVar1 = i_this->m30C * cM_ssin(i_this->m2F0[0]);

    cXyz local_14;
    local_14.x = sVar1;
    local_14.y = 0.0f;
    local_14.z = 0.0f;

    cXyz local_8;
    MtxPosition(&local_14, &local_8);
    
    i_this->current.pos.x += local_8.x;
    i_this->current.pos.z += local_8.z;
}

/* 00000EBC-00001314       .text action_dousa_move__FP8ks_class */
void action_dousa_move(ks_class* i_this) { 
    daPy_lk_c* link = daPy_getPlayerLinkActorClass();

    switch (i_this->m2CC) {
        case 0:
            i_this->m30C = 0.0f;

            i_this->gravity = -3.0f;
            
            for (int i = 0; i < 5; i++) {
                i_this->m2F0[i] = 0;
            }

            i_this->m2CC++;
        case 1:
            cLib_addCalcAngleS2(&i_this->shape_angle.z, 0, 1, 0x1000);
            
            if (fopAcM_searchActorDistance(i_this, dComIfGp_getPlayer(0)) > 10000.0f) {
                break;
            }
            
            if (i_this->shape_angle.z > 0x100) {
                return;
            }

            i_this->shape_angle.z = 0;

            fopAcM_seStart(i_this, 0x587a, 0);

            if (tyaku_check(i_this) != 0) {
                i_this->gravity = -3.0f;

                i_this->speed.y = 1.0f;
                i_this->speed.y += cM_rndF(5.0f);
            }

            i_this->current.angle.y = i_this->m2FA.y + fopAcM_searchActorAngleY(i_this, dComIfGp_getPlayer(0));
            
            i_this->m2CC++;
        case 2:
            if (i_this->mAcch.ChkGroundHit()) {
                i_this->current.angle.y = i_this->m2FA.y + fopAcM_searchActorAngleY(i_this, dComIfGp_getPlayer(0));
            }

            if (KUTTUKU_ALL_COUNT >= 0 && KUTTUKU_ALL_COUNT < 0x14 && 
                (link->getSpeedF() > 12.0f || HEAVY_IN != 0) && 
                fopAcM_searchActorDistance(i_this, dComIfGp_getPlayer(0)) < 500.0f &&
                !dComIfGp_checkPlayerStatus0(0, 0x100000) &&
                tyaku_check(i_this)) {
                
                i_this->m2CB = 1;
                i_this->m2CC = 10;

                return;
            }

            if (link->getSpeedF() <= 12.0f || dComIfGp_checkPlayerStatus0(0, 0x100000)) {
                cLib_addCalc0(&i_this->speedF, 0.3f, cM_rndF(1.0f) + 0.3f);
                
                cLib_addCalcAngleS2(&i_this->shape_angle.z, 0, 1, 0x1000);
                
                i_this->m2FA.y = 0;
                break;
            }

            if (i_this->m2FA.y == 0) {
                i_this->m2FA.y = (fopAcM_GetID(i_this) & 0xf) * cM_rndFX(512.0f);
            }

            i_this->shape_angle.z = cM_rndFX(2000.0f);

            speed_keisan(i_this, i_this->current.angle.y);

            i_this->speedF = 12.0f;

            i_this->m2F0[0] += 1000;

            i_this->m30C = 10.0f;

            if (tyaku_check(i_this)) {
                fopAcM_seStart(i_this, 0x587a, 0);

                i_this->gravity = -3.0f;

                i_this->speed.y = 1.0f;
                i_this->speed.y += cM_rndF(5.0f);
            }
            break;
        case 3:
            if (fopAcM_searchActorDistance(i_this, dComIfGp_getPlayer(0)) < 500.0f) {
                i_this->current.angle.y = fopAcM_searchActorAngleY(i_this, dComIfGp_getPlayer(0));
            }
    }

    if (i_this->m2CC == 2 || i_this->m2CC == 3) {
        cLib_addCalcAngleS2(&i_this->shape_angle.y, i_this->current.angle.y, 1, 0x1000);
    }
    
    if (body_atari_check(i_this) != 0) {
        fopAcM_seStart(i_this, 0x2828, 0);
    }
}

/* 00001314-00001630       .text action_kougeki_move__FP8ks_class */
void action_kougeki_move(ks_class* i_this) {    
    cXyz head_top_pos = daPy_getPlayerActorClass()->getHeadTopPos();

    i_this->m31C = 20.0f;

    if (head_top_pos.y > i_this->current.pos.y) {
        i_this->m31C = 60.0f;
    }

    switch (i_this->m2CC) {
        case 0xa: {
            i_this->mSph.OffCoSetBit();

            i_this->speedF = 26.0f;
            i_this->gravity = -4.0f;
            i_this->speed.y = 28.0f;

            for (int i = 0; i < 5; i++) {
                i_this->m2F0[i] = 0;
            }

            i_this->m30C = 0.0f;

            i_this->current.angle.y = fopAcM_searchActorAngleY(i_this, dComIfGp_getPlayer(0));
            
            mDoAud_seStart(0x587b, &i_this->eyePos, 0, dComIfGp_getReverb(fopAcM_GetRoomNo(i_this)));
            
            fopAcM_monsSeStart(i_this, 0x486d, 0);
            
            i_this->m2CC++;
            
            break;
        }
        case 0xb: {
            if (i_this->speedF > 0.0f && i_this->m2F0[1] == 0 && i_this->mSph.ChkAtShieldHit()) {
                i_this->gravity = -4.0f;
                i_this->speed.y = 25.0f;
                i_this->speedF *= -0.5f;
                
                i_this->m2F0[1] = 1;
            }

            if (!i_this->m2F0[1] && ks_kuttuki_check(i_this)) {
                return;
            }

            if (!i_this->mAcch.ChkGroundHit() && !i_this->mAcch.ChkWaterIn()) {
                break;
            }

            i_this->mSph.OnCoSetBit();

            i_this->m2E8[2] = (s16)(cM_rndF(20.0f) + 20.0f);

            i_this->m2CC++;
        }
        case 0xc:
            ks_kuttuki_check(i_this);

            if (tyaku_check(i_this)) {
                i_this->gravity = -4.0f;
                i_this->speed.y = 1.0f;
                i_this->speed.y += cM_rndF(5.0f);
                i_this->speedF = 16.0f;
            }
        
            if (i_this->m2E8[2] == 0) {
                i_this->speedF = 0.0f;
                i_this->m31C = 20.0f;
                i_this->m2CB = 0;
                i_this->m2CC = 0;
            }
    }

    cLib_addCalcAngleS2(&i_this->shape_angle.y, i_this->current.angle.y, 1, 0x1000);
    
    if (body_atari_check(i_this)) {
        fopAcM_seStart(i_this, 0x2828, 0);
    }
}

/* 00001630-00001874       .text action_kaze_move__FP8ks_class */
void action_kaze_move(ks_class* i_this) {
    s8 bVar1;

    switch (i_this->m2CC) {
        case 0x14: {
            for (int i = 0; i < 5; i++) {
                i_this->m2F0[i] = 0;
            }
    
            i_this->m2E8[1] = 0x32;
    
            fopAcM_monsSeStart(i_this, 0x486f, 0);
            i_this->m310 = i_this->current.pos.y;
            i_this->m30C = 0.0f;
            i_this->speedF = cM_rndF(15.0f) + 10.0f;
            i_this->m314 = cM_rndF(15.0f) + 10.0f;
            i_this->m308 = 0.0f;
            i_this->m2CC++;
        }
        case 0x15: {
            cLib_addCalc2(&i_this->speed.y, i_this->m314, 0.8f, i_this->m308);
            
            cLib_addCalc2(&i_this->m308, 5.0f, 1.0f, 0.5f);
            
            if (i_this->m310 + 200.0f < i_this->current.pos.y || i_this->m2E8[1] == 0) {
                i_this->m2CC++;
            }
            
            break;
        }
        case 0x16: {
            cLib_addCalc2(&i_this->gravity, -1.0f, 0.3f, 0.5f);
            
            if (i_this->speed.y < -2.0f) {
                i_this->speed.y = -2.0f;
            }

            cLib_addCalc0(&i_this->speedF, 0.5f, 2.0f);
            
            speed_keisan(i_this, i_this->shape_angle.y);

            i_this->m2F0[0] += 3000;

            i_this->m30C = 2.0f;

            if (tyaku_check(i_this)) {
                i_this->m2CB = 0;
                i_this->m2CC = 0;
                return;
            }
        }
    }

    i_this->shape_angle.z += 0x500;

    if (body_atari_check(i_this)) {
        fopAcM_seStart(i_this, 0x2828, 0);
    }
}

/* 00001874-00001A14       .text dead_eff_set__FP8ks_classP4cXyz */
void dead_eff_set(ks_class*, cXyz*) {
    /* Nonmatching */
}

/* 00001A14-00001C5C       .text action_dead_move__FP8ks_class */
void action_dead_move(ks_class*) {
    /* Nonmatching */
}

/* 00001C5C-000026DC       .text action_omoi__FP8ks_class */
void action_omoi(ks_class*) {
    /* Nonmatching */
}

/* 000026DC-000027A0       .text tsubo_search__FPvPv */
void tsubo_search(void*, void*) {
    /* Nonmatching */
}

/* 000027A0-00002A40       .text action_tubo_search__FP8ks_class */
void action_tubo_search(ks_class*) {
    /* Nonmatching */
}

/* 00002A40-00002BC4       .text action_kb_birth_check__FP8ks_class */
void action_kb_birth_check(ks_class*) {
    /* Nonmatching */
}

/* 00002BC4-00002C54       .text BG_check__FP8ks_class */
void BG_check(ks_class*) {
    /* Nonmatching */
}

/* 00002C54-00003054       .text daKS_Execute__FP8ks_class */
static BOOL daKS_Execute(ks_class* i_this) {    
    if (enemy_ice(&i_this->mEnemyIce)) {
        i_this->m2B4->getModel()->setBaseTRMtx(mDoMtx_stack_c::get());
        i_this->m2B8->getModel()->setBaseTRMtx(mDoMtx_stack_c::get());
        if (i_this->m2D0 && (i_this->m320++, i_this->m320 > 7.0f)) {
            i_this->m320 = 7.0f;
        }
        return TRUE;
    }

    for (int i = 0; i < 4; i++) {
        if (i_this->m2E8[i]) {
            i_this->m2E8[i]--;
        }
    }

    if (i_this->m2D4 != 0 && i_this->m2CB != 3) {
        fopAc_ac_c* pfVar4 = fopAcM_SearchByID(i_this->m2D4);
        bool bVar5 = false;
        if (pfVar4 && ((fopAcM_GetParam(pfVar4) & 0xff0000) == 0xff0000 || (fopAcM_GetParam(pfVar4) & 0xff0000) == 0)) {
            if (fopAcM_GetName(pfVar4) == PROC_GM) {
                if (pfVar4->health <= 0) {
                    bVar5 = true;
                }
            }
            else {
                bVar5 = true;
            }
            if (bVar5) {
                if (i_this->m2CB != 4) {
                    i_this->m2CB = 3;
                    i_this->m2CC = 30;
                }
                else {
                    if (i_this->m2CC != 43) {
                        daPy_py_c* link = (daPy_py_c*)daPy_getPlayerLinkActorClass();
                        link->offHeavyState();
                        HEAVY_IN = 0;
                        GORON_COUNT = 0;
                        i_this->m2F0[0] = 0;
                        i_this->m2F0[1] = 0;
                        i_this->m2CC = 0x2a;
                    }
                }
            }
        }
    }
    switch(i_this->m2CB) {
        case 0:
            action_dousa_move(i_this);
            ks_kuttuki_check(i_this);
            break;
        case 1:
            action_kougeki_move(i_this);
            break;
        case 2:
            action_kaze_move(i_this);
            break;
        case 3:
            action_dead_move(i_this);
            break;
        case 4:
            action_omoi(i_this);
            break;
        case 10:
            action_tubo_search(i_this);
            break;
        case 20:
            action_kb_birth_check(i_this);
    }

    if (i_this->m2C8 == 6) {
        return TRUE;
    }

    if (i_this->m302 && (i_this->m302++, i_this->m302 > 7)) {
        i_this->m302 = 0;
    }

    if (i_this->m2E8[0] == 0) {
        i_this->m2E8[0] = cM_rndFX(25.0f) + 50.0f;
        i_this->m302 = 1;
    }
    
    cMtx_YrotS(*calc_mtx, i_this->current.angle.y);

    cXyz local_18;
    local_18.x = 0.0f;
    local_18.y = 0.0f;
    local_18.z = i_this->speedF;

    cXyz local_c;
    MtxPosition(&local_18, &local_c);

    i_this->speed.x = local_c.x;
    i_this->speed.z = local_c.z;

    if (i_this->m2CC != 41 && !i_this->mAcch.ChkGroundHit() && !i_this->mAcch.ChkWaterIn()) {
        i_this->speed.y += i_this->gravity;
        if (i_this->speed.y < -20.0f) {
            i_this->speed.y = -20.0f;
        }
    }

    i_this->eyePos = i_this->current.pos;

    i_this->attention_info.position = i_this->eyePos;

    i_this->mSph.SetC(i_this->current.pos);
    i_this->mSph.SetR(i_this->m31C);

    dComIfG_Ccsp()->Set(&i_this->mSph);

    if (i_this->mSph.ChkCoSet() && (i_this->m2CB == 0 || i_this->m2CB == 2)) {
        fopAcM_posMove(i_this, &i_this->m540);
    }
    else {
        fopAcM_posMove(i_this, NULL);
    }

    if (i_this->m2CC != 41) {
        BG_check(i_this);
        naraku_check(i_this);
    }

    draw_SUB(i_this);

    i_this->m2CD = 1;

    return TRUE;
}

/* 00003054-0000305C       .text daKS_IsDelete__FP8ks_class */
static BOOL daKS_IsDelete(ks_class* i_this) {
    return TRUE;
}

/* 0000305C-000030F4       .text daKS_Delete__FP8ks_class */
static BOOL daKS_Delete(ks_class*) {
    /* Nonmatching */
}

/* 000030F4-000034B0       .text useHeapInit__FP10fopAc_ac_c */
static BOOL useHeapInit(fopAc_ac_c*) {
    /* Nonmatching */
}

/* 000034F8-00003A94       .text daKS_Create__FP10fopAc_ac_c */
static cPhs_State daKS_Create(fopAc_ac_c*) {
    /* Nonmatching */
}

static actor_method_class l_daKS_Method = {
    (process_method_func)daKS_Create,
    (process_method_func)daKS_Delete,
    (process_method_func)daKS_Execute,
    (process_method_func)daKS_IsDelete,
    (process_method_func)daKS_Draw,
};

actor_process_profile_definition g_profile_KS = {
    /* LayerID      */ fpcLy_CURRENT_e,
    /* ListID       */ 0x0007,
    /* ListPrio     */ fpcPi_CURRENT_e,
    /* ProcName     */ PROC_KS,
    /* Proc SubMtd  */ &g_fpcLf_Method.base,
    /* Size         */ sizeof(ks_class),
    /* SizeOther    */ 0,
    /* Parameters   */ 0,
    /* Leaf SubMtd  */ &g_fopAc_Method.base,
    /* Priority     */ 0x00C0,
    /* Actor SubMtd */ &l_daKS_Method,
    /* Status       */ fopAcStts_CULL_e | fopAcStts_UNK40000_e,
    /* Group        */ fopAc_ENV_e,
    /* CullType     */ fopAc_CULLBOX_CUSTOM_e,
};
