//
// Generated by dtk
// Translation Unit: d_a_obj_hbrf1.cpp
//

#include "d/actor/d_a_obj_hbrf1.h"
#include "d/res/res_hbrf1.h"
#include "d/d_procname.h"
#include "d/d_com_inf_game.h"

Mtx daObjHbrf1::Act_c::M_tmp_mtx;

const char daObjHbrf1::Act_c::M_arcname[] = "Hbrf1";
const char daObjHbrf1::Act_c::M_evname[] = "ami_cam";

/* 00000078-0000012C       .text CreateHeap__Q210daObjHbrf15Act_cFv */
BOOL daObjHbrf1::Act_c::CreateHeap() {
    J3DModelData* model_data = (J3DModelData*)dComIfG_getObjectRes(M_arcname, HBRF1_BDL_HBRF1);
    JUT_ASSERT(0x5E, model_data != 0);

    mpModel = mDoExt_J3DModel__create(model_data, 0, 0x11020203);

    return mpModel != NULL;
}

/* 0000012C-000002B4       .text Create__Q210daObjHbrf15Act_cFv */
int daObjHbrf1::Act_c::Create() {
    /* Nonmatching */
}

/* 000002B4-000003B0       .text Mthd_Create__Q210daObjHbrf15Act_cFv */
s32 daObjHbrf1::Act_c::Mthd_Create() {
    fopAcM_SetupActor(this, daObjHbrf1::Act_c);

    s32 phase_state = dComIfG_resLoad(&mPhs, M_arcname);

    if (phase_state == cPhs_COMPLEATE_e) {
        phase_state = MoveBGCreate(M_arcname, HBRF1_DZB_HBRF1, dBgS_MoveBGProc_Trans, 0);
        JUT_ASSERT(0x94, (phase_state == cPhs_COMPLEATE_e) || (phase_state == cPhs_ERROR_e));
    }

    return phase_state;
}

/* 000003B0-000003B8       .text Delete__Q210daObjHbrf15Act_cFv */
BOOL daObjHbrf1::Act_c::Delete() {
    /* Nonmatching */
}

/* 000003B8-00000404       .text Mthd_Delete__Q210daObjHbrf15Act_cFv */
BOOL daObjHbrf1::Act_c::Mthd_Delete() {
    BOOL ret = MoveBGDelete();

    // Debug map shows dComIfG_deleteObjectRes here?
    dComIfG_resDelete(&mPhs, M_arcname);

    return ret;
}

/* 00000404-00000484       .text set_mtx__Q210daObjHbrf15Act_cFv */
void daObjHbrf1::Act_c::set_mtx() {
    /* Nonmatching */
}

/* 00000484-000004C0       .text init_mtx__Q210daObjHbrf15Act_cFv */
void daObjHbrf1::Act_c::init_mtx() {
    /* Nonmatching */
}

/* 000004C0-0000066C       .text daObjHbrf1_down_stop__Q210daObjHbrf15Act_cFv */
void daObjHbrf1::Act_c::daObjHbrf1_down_stop() {
    /* Nonmatching */
}

/* 0000066C-0000068C       .text daObjHbrf1_up_demo_wait__Q210daObjHbrf15Act_cFv */
void daObjHbrf1::Act_c::daObjHbrf1_up_demo_wait() {
    /* Nonmatching */
}

/* 0000068C-000006B0       .text daObjHbrf1_up_demo_timer__Q210daObjHbrf15Act_cFv */
void daObjHbrf1::Act_c::daObjHbrf1_up_demo_timer() {
    /* Nonmatching */
}

/* 000006B0-000007FC       .text daObjHbrf1_up_demo__Q210daObjHbrf15Act_cFv */
void daObjHbrf1::Act_c::daObjHbrf1_up_demo() {
    /* Nonmatching */
}

/* 000007FC-000009B0       .text daObjHbrf1_up_stop__Q210daObjHbrf15Act_cFv */
void daObjHbrf1::Act_c::daObjHbrf1_up_stop() {
    /* Nonmatching */
}

/* 000009B0-00000A08       .text daObjHbrf1_down_demo_wait__Q210daObjHbrf15Act_cFv */
void daObjHbrf1::Act_c::daObjHbrf1_down_demo_wait() {
    /* Nonmatching */
}

/* 00000A08-00000A2C       .text daObjHbrf1_down_demo_timer__Q210daObjHbrf15Act_cFv */
void daObjHbrf1::Act_c::daObjHbrf1_down_demo_timer() {
    /* Nonmatching */
}

/* 00000A2C-00000B70       .text daObjHbrf1_down_demo__Q210daObjHbrf15Act_cFv */
void daObjHbrf1::Act_c::daObjHbrf1_down_demo() {
    /* Nonmatching */
}

/* 00000B70-00000C1C       .text Execute__Q210daObjHbrf15Act_cFPPA3_A4_f */
BOOL daObjHbrf1::Act_c::Execute(Mtx** mtx) {
    switch (mMode) {
    case Mode_DOWN_STOP_e:
        daObjHbrf1_down_stop();
        break;
    case Mode_UP_DEMO_WAIT_e:
        daObjHbrf1_up_demo_wait();
        break;
    case Mode_UP_DEMO_TIMER_e:
        daObjHbrf1_up_demo_timer();
        break;
    case Mode_UP_DEMO_e:
        daObjHbrf1_up_demo();
        break;
    case Mode_UP_STOP_e:
        daObjHbrf1_up_stop();
        break;
    case Mode_DOWN_DEMO_WAIT_e:
        daObjHbrf1_down_demo_wait();
        break;
    case Mode_DOWN_DEMO_TIMER_e:
        daObjHbrf1_down_demo_timer();
        break;
    case Mode_DOWN_DEMO_e:
        daObjHbrf1_down_demo();
        break;
    }

    set_mtx();

    *mtx = &M_tmp_mtx;
    return TRUE;
}

/* 00000C1C-00000CBC       .text Draw__Q210daObjHbrf15Act_cFv */
BOOL daObjHbrf1::Act_c::Draw() {
    g_env_light.settingTevStruct(TEV_TYPE_BG0, &current.pos, &tevStr);
    g_env_light.setLightTevColorType(mpModel, &tevStr);

    dComIfGd_setListBG();
    mDoExt_modelUpdateDL(mpModel);
    dComIfGd_setList();

    // Debug polygons get drawn here?

    return TRUE;
}

namespace daObjHbrf1 {
namespace {
/* 00000CBC-00000CDC       .text Mthd_Create__Q210daObjHbrf127@unnamed@d_a_obj_hbrf1_cpp@FPv */
s32 Mthd_Create(void* i_this) {
    return static_cast<daObjHbrf1::Act_c*>(i_this)->Mthd_Create();
}

/* 00000CDC-00000CFC       .text Mthd_Delete__Q210daObjHbrf127@unnamed@d_a_obj_hbrf1_cpp@FPv */
BOOL Mthd_Delete(void* i_this) {
    return static_cast<daObjHbrf1::Act_c*>(i_this)->Mthd_Delete();
}

/* 00000CFC-00000D1C       .text Mthd_Execute__Q210daObjHbrf127@unnamed@d_a_obj_hbrf1_cpp@FPv */
BOOL Mthd_Execute(void* i_this) {
    return static_cast<daObjHbrf1::Act_c*>(i_this)->MoveBGExecute();
}

/* 00000D1C-00000D48       .text Mthd_Draw__Q210daObjHbrf127@unnamed@d_a_obj_hbrf1_cpp@FPv */
BOOL Mthd_Draw(void* i_this) {
    return static_cast<daObjHbrf1::Act_c*>(i_this)->MoveBGDraw();
}

/* 00000D48-00000D74       .text Mthd_IsDelete__Q210daObjHbrf127@unnamed@d_a_obj_hbrf1_cpp@FPv */
BOOL Mthd_IsDelete(void* i_this) {
    return static_cast<daObjHbrf1::Act_c*>(i_this)->MoveBGIsDelete();
}

static actor_method_class Mthd_Hbrf1 = {
    (process_method_func)Mthd_Create,
    (process_method_func)Mthd_Delete,
    (process_method_func)Mthd_Execute,
    (process_method_func)Mthd_IsDelete,
    (process_method_func)Mthd_Draw,
};
}; // namespace
}; // namespace daObjHbrf1

actor_process_profile_definition g_profile_Obj_Hbrf1 = {
    /* LayerID      */ fpcLy_CURRENT_e,
    /* ListID       */ 0x0003,
    /* ListPrio     */ fpcPi_CURRENT_e,
    /* ProcName     */ PROC_Obj_Hbrf1,
    /* Proc SubMtd  */ &g_fpcLf_Method.base,
    /* Size         */ sizeof(daObjHbrf1::Act_c),
    /* SizeOther    */ 0,
    /* Parameters   */ 0,
    /* Leaf SubMtd  */ &g_fopAc_Method.base,
    /* Priority     */ 0x001C,
    /* Actor SubMtd */ &daObjHbrf1::Mthd_Hbrf1,
    /* Status       */ fopAcStts_NOCULLEXEC_e | fopAcStts_CULL_e | fopAcStts_UNK40000_e,
    /* Group        */ fopAc_ACTOR_e,
    /* CullType     */ fopAc_CULLBOX_CUSTOM_e,
};
