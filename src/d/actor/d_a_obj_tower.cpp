//
// Generated by dtk
// Translation Unit: d_a_obj_tower.cpp
//

#include "d/actor/d_a_obj_tower.h"
#include "d/d_com_inf_game.h"
#include "d/d_procname.h"
#include "dolphin/mtx/mtx.h"
#include "dolphin/types.h"
#include "f_op/f_op_actor_mng.h"
#include "m_Do/m_Do_printf.h"

/* 00000078-00000098       .text CheckCreateHeap__FP10fopAc_ac_c */
static BOOL CheckCreateHeap(fopAc_ac_c* i_this) {
    ((daObjTower_c*)i_this)->CreateHeap();
}

/* 00000098-0000020C       .text CreateHeap__12daObjTower_cFv */
bool daObjTower_c::CreateHeap() {
    J3DModelData* pModel = (J3DModelData*)dRes_control_c::getRes(
        "X_tower", 4, g_dComIfG_gameInfo.mResControl.mObjectInfo, 0x40);

    if (pModel == NULL) {
        JUTAssertion::showAssert(JUTAssertion::getSDevice(), "d_a_obj_tower.cpp", 0x56,
                                 "modelData != 0");
        OSPanic("d_a_obj_tower.cpp", 0x56, "Halt");
    }

    mpModel = mDoExt_J3DModel__create(pModel, 0, 0x11020203);

    if (mpModel == NULL) {
        return false;
    } else {
        PSMTXTrans(mDoMtx_stack_c::now, current.pos.x, current.pos.y, current.pos.z);
        mDoMtx_YrotM(mDoMtx_stack_c::now, shape_angle.y);
        mDoMtx_stack_c::scaleM(mScale.x, mScale.y, mScale.z);
        PSMTXCopy(mDoMtx_stack_c::now, mMtx);

        mpBgW = new dBgW();

        if (mpBgW == NULL) {
            return false;
        } else {
            cBgD_t* pData = (cBgD_t*)dRes_control_c::getRes(
                "X_tower", 7, g_dComIfG_gameInfo.mResControl.mObjectInfo, 0x40);
            return !mpBgW->Set(pData, cBgW::MOVE_BG_e, &mMtx);
        }
    }
}

/* 0000020C-0000028C       .text CreateInit__12daObjTower_cFv */
void daObjTower_c::CreateInit() {
    mCullMtx = mpModel->mBaseTransformMtx;
    fopAcM_setCullSizeBox(this, -30000.0, -5000.0, -30000.0, 30000.0, 40000.0, 30000.0);
    g_dComIfG_gameInfo.play.mBgS.Regist(mpBgW, this);
    field_0x2d0 = 1;
    set_mtx();
}

/* 0000028C-0000030C       .text set_mtx__12daObjTower_cFv */
void daObjTower_c::set_mtx() {
    J3DModel* pJVar1;
    pJVar1 = mpModel;

    (pJVar1->mBaseScale).x = mScale.x;
    (pJVar1->mBaseScale).y = mScale.y;
    (pJVar1->mBaseScale).z = mScale.z;

    PSMTXTrans(mDoMtx_stack_c::now, current.pos.x, current.pos.y, current.pos.z);
    mDoMtx_YrotM(mDoMtx_stack_c::now, current.angle.y);
    PSMTXCopy(mDoMtx_stack_c::now, mpModel->mBaseTransformMtx);
}

/* 0000030C-000003DC       .text daObjTower_Create__FPv */
static cPhs__Step daObjTower_Create(void* i_this) {
    cPhs__Step PVar3;

    fopAcM_SetupActor(((daObjTower_c*)i_this), daObjTower_c);

    ((daObjTower_c*)i_this)->field_0x2d0 = 0;

    if (!g_dComIfG_gameInfo.save.mSavedata.mEvent.isEventBit(0x1e40)) {
        PVar3 = cPhs_UNK3_e;
    } else {
        PVar3 = (cPhs__Step)dComIfG_resLoad(&((daObjTower_c*)i_this)->mPhs, "X_tower");
        if (PVar3 == cPhs_COMPLEATE_e) {
            if (!fopAcM_entrySolidHeap(((daObjTower_c*)i_this), CheckCreateHeap, 0x1c6c0)) {
                PVar3 = cPhs_ERROR_e;
            } else {
                ((daObjTower_c*)i_this)->CreateInit();
            }
        }
    }
    return PVar3;
}

/* 000003DC-00000444       .text daObjTower_Delete__FPv */
static BOOL daObjTower_Delete(void* i_this) {
    if (((daObjTower_c*)(i_this))->field_0x2d0 == 1) {
        ((cBgS*)&g_dComIfG_gameInfo.play.mBgS.m_chk_element[0].m_bgw_base_ptr)
            ->Release((cBgW*)((daObjTower_c*)i_this)->mpBgW);
    }

    if (((daObjTower_c*)i_this)->mBase.mCreateResult != 3) {
        dComIfG_resDelete(&(((daObjTower_c*)i_this)->mPhs), "X_tower");
    }

    return TRUE;
}

/* 00000444-000004E8       .text daObjTower_Draw__FPv */
static BOOL daObjTower_Draw(void* i_this) {
    g_env_light.settingTevStruct(1, &((daObjTower_c*)i_this)->current.pos,
                                 &((daObjTower_c*)i_this)->mTevStr);
    g_env_light.setLightTevColorType(((daObjTower_c*)i_this)->mpModel,
                                     &((daObjTower_c*)i_this)->mTevStr);

    j3dSys.mDrawBuffer[0] = g_dComIfG_gameInfo.drawlist.mpOpaListBG;
    j3dSys.mDrawBuffer[1] = g_dComIfG_gameInfo.drawlist.mpXluListBG;

    mDoExt_modelUpdateDL(((daObjTower_c*)i_this)->mpModel);

    j3dSys.mDrawBuffer[0] = g_dComIfG_gameInfo.drawlist.mpOpaList;
    j3dSys.mDrawBuffer[1] = g_dComIfG_gameInfo.drawlist.mpXluList;

    return TRUE;
}

/* 000004E8-00000568       .text daObjTower_Execute__FPv */
static BOOL daObjTower_Execute(void* i_this) {
    u8 idx = ((daObjTower_c*)i_this)->mDemoActorId;

    if (idx != 0) {
        dDemo_actor_c* pdVar1 = (g_dComIfG_gameInfo.play.mDemo)->mDemoObj.getActor(idx);
        if ((pdVar1 != 0) && (pdVar1->mFlags & 2)) {
            ((daObjTower_c*)i_this)->current.pos.x = (pdVar1->mTranslation).x;
            ((daObjTower_c*)i_this)->current.pos.y = (pdVar1->mTranslation).y;
            ((daObjTower_c*)i_this)->current.pos.z = (pdVar1->mTranslation).z;
        }
    }

    ((daObjTower_c*)i_this)->set_mtx();

    return TRUE;
}

/* 00000568-00000570       .text daObjTower_IsDelete__FPv */
static BOOL daObjTower_IsDelete(void*) {
    return TRUE;
}

static actor_method_class daObj_TowerMethodTable = {
    (process_method_func)daObjTower_Create,  (process_method_func)daObjTower_Delete,
    (process_method_func)daObjTower_Execute, (process_method_func)daObjTower_IsDelete,
    (process_method_func)daObjTower_Draw,
};

struct actor_process_profile_definition g_profile_Obj_Tower = {
    /* LayerID      */ fpcLy_CURRENT_e,
    /* ListID       */ 7,
    /* ListPrio     */ fpcLy_CURRENT_e,
    /* ProcName     */ PROC_Obj_Tower,
    /* Proc SubMtd  */ &g_fpcLf_Method.mBase,
    /* Size         */ sizeof(daObjTower_c),
    /* SizeOther    */ 0,
    /* Parameters   */ 0,
    /* Leaf SubMtd  */ &g_fopAc_Method.base,
    /* Priority     */ 0x1C4,
    /* Actor SubMtd */ &daObj_TowerMethodTable,
    /* Status       */ fopAcStts_UNK40000_e,
    /* Group        */ fopAc_ACTOR_e,
    /* CullType     */ fopAc_CULLBOX_CUSTOM_e,
};
