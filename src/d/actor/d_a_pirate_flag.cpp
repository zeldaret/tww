//
// Generated by dtk
// Translation Unit: d_a_pirate_flag.cpp
//

#include "d/actor/d_a_pirate_flag.h"
#include "d/d_procname.h"

// Needed for the .data section to match.
static Vec dummy_2100 = {1.0f, 1.0f, 1.0f};
static Vec dummy_2080 = {1.0f, 1.0f, 1.0f};
static u8 dummy_1811[] = {0x02, 0x00, 0x02, 0x01};
static f64 dummy4[2] = {3.0, 0.5};

static Vec l_pos[25] = {
    {0.0f, 2200.0f, 0.0f},
    {0.0f, 2200.0f, 200.0f},
    {0.0f, 2200.0f, 400.0f},
    {0.0f, 2200.0f, 600.0f},
    {0.0f, 2200.0f, 800.0f},

    {0.0f, 2100.0f, 0.0f},
    {0.0f, 2100.0f, 200.0f},
    {0.0f, 2100.0f, 400.0f},
    {0.0f, 2100.0f, 600.0f},
    {0.0f, 2100.0f, 800.0f},

    {0.0f, 2000.0f, 0.0f},
    {0.0f, 2000.0f, 200.0f},
    {0.0f, 2000.0f, 400.0f},
    {0.0f, 2000.0f, 600.0f},
    {0.0f, 2000.0f, 800.0f},

    {0.0f, 1900.0f, 0.0f},
    {0.0f, 1900.0f, 200.0f},
    {0.0f, 1900.0f, 400.0f},
    {0.0f, 1900.0f, 600.0f},
    {0.0f, 1900.0f, 800.0f},

    {0.0f, 1800.0f, 0.0f},
    {0.0f, 1800.0f, 200.0f},
    {0.0f, 1800.0f, 400.0f},
    {0.0f, 1800.0f, 600.0f},
    {0.0f, 1800.0f, 800.0f},
};

static cXy l_texCoord[] = {
    {0.0f,  0.0f},
    {0.25f, 0.0f},
    {0.5f,  0.0f},
    {0.75f, 0.0f},
    {1.0f,  0.0f},

    {0.0f,  0.25f},
    {0.25f, 0.25f},
    {0.5f,  0.25f},
    {0.75f, 0.25f},
    {1.0f,  0.25f},

    {0.0f,  0.5f},
    {0.25f, 0.5f},
    {0.5f,  0.5f},
    {0.75f, 0.5f},
    {1.0f,  0.5f},

    {0.0f,  0.75f},
    {0.25f, 0.75f},
    {0.5f,  0.75f},
    {0.75f, 0.75f},
    {1.0f,  0.75f},

    {0.0f,  1.0f},
    {0.25f, 1.0f},
    {0.5f,  1.0f},
    {0.75f, 1.0f},
    {1.0f,  1.0f},
};

static u8 l_pirate_flag_DL[0xA4] ALIGN_DECL(32) = {
    0x98, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x05, 0x05, 0x05, 0x01, 0x01, 0x01,
    0x06, 0x06, 0x06, 0x02, 0x02, 0x02, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03,
    0x08, 0x08, 0x08, 0x04, 0x04, 0x04, 0x09, 0x09, 0x09, 0x98, 0x00, 0x0a,
    0x05, 0x05, 0x05, 0x0a, 0x0a, 0x0a, 0x06, 0x06, 0x06, 0x0b, 0x0b, 0x0b,
    0x07, 0x07, 0x07, 0x0c, 0x0c, 0x0c, 0x08, 0x08, 0x08, 0x0d, 0x0d, 0x0d,
    0x09, 0x09, 0x09, 0x0e, 0x0e, 0x0e, 0x98, 0x00, 0x0a, 0x0a, 0x0a, 0x0a,
    0x0f, 0x0f, 0x0f, 0x0b, 0x0b, 0x0b, 0x10, 0x10, 0x10, 0x0c, 0x0c, 0x0c,
    0x11, 0x11, 0x11, 0x0d, 0x0d, 0x0d, 0x12, 0x12, 0x12, 0x0e, 0x0e, 0x0e,
    0x13, 0x13, 0x13, 0x98, 0x00, 0x0a, 0x0f, 0x0f, 0x0f, 0x14, 0x14, 0x14,
    0x10, 0x10, 0x10, 0x15, 0x15, 0x15, 0x11, 0x11, 0x11, 0x16, 0x16, 0x16,
    0x12, 0x12, 0x12, 0x17, 0x17, 0x17, 0x13, 0x13, 0x13, 0x18, 0x18, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

static u8 l_pirate_flag_matDL[0x34] ALIGN_DECL(32) = {
    0x61, 0x43, 0x00, 0x00, 0x01, 0x61, 0x40, 0x00, 0x00, 0x17, 0x61,
    0x41, 0x00, 0x04, 0xAD, 0x61, 0xF3, 0x64, 0x80, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

};

static daPirate_Flag_HIO_c l_HIO;

/* 000000EC-00000364       .text setCorrectNrmAngle__22daPirate_Flag_packet_cFsf */
void daPirate_Flag_packet_c::setCorrectNrmAngle(s16 param_0, f32 param_1) {
    m87C += (s16)((s32)cM_rndF(200.0f) + 900);
    m878 = 300.0f * cM_ssin(m87C);

    s16 temp_r0 = param_0 + 0x8000;
    s32 param_0_int = param_0; // Probably fake variable
    s16 temp_r26 = (l_HIO.m1C * (1.0f - param_1 * 0.5f));

    if (abs((s32)temp_r0) < (s16)cM_deg2s(temp_r26 * 1.25f)) {
        s16 var_r4;
        if (temp_r0 > 0) {
            var_r4 = (s16)cM_deg2s(-temp_r26);
        } else {
            var_r4 = (s16)cM_deg2s(temp_r26);
        }

        cLib_addCalcAngleS2(&m87A, var_r4, 5, 0xC0);
    } else if (abs(param_0_int) < (s16)cM_deg2s(temp_r26 * 1.25f)) {
        s16 var_r4;
        if ((s16)param_0_int > 0) { // Fakematch? Pointless cast
            var_r4 = (s16)cM_deg2s(-temp_r26);
        } else {
            var_r4 = (s16)cM_deg2s(temp_r26);
        }

        cLib_addCalcAngleS2(&m87A, var_r4, 5, 0xC0);
    } else {
        cLib_addCalcAngleS2(&m87A, 0, 5, 0xC0);
    }

    m878 += m87A;
}

/* 00000364-000003F0       .text setBackNrm__22daPirate_Flag_packet_cFv */
void daPirate_Flag_packet_c::setBackNrm() {
    cXyz* a = m29C[m87E];
    cXyz* b = m4F4[m87E];
    for (int i = 0; i < (s32)ARRAY_SIZE(m29C[0]); i++) {
        b->setall(0.0f);
        *b -= *a;

        a++;
        b++;
    }
}

/* 000003F0-00000800       .text setNrmVtx__22daPirate_Flag_packet_cFP4cXyzii */
void daPirate_Flag_packet_c::setNrmVtx(cXyz*, int, int) {
    /* Nonmatching */
}

/* 0000083C-00000E44       .text draw__22daPirate_Flag_packet_cFv */
void daPirate_Flag_packet_c::draw() {
    /* Nonmatching */
}

/* 00000E44-000011A0       .text daPirate_Flag_Draw__FP17pirate_flag_class */
static BOOL daPirate_Flag_Draw(pirate_flag_class*) {
    /* Nonmatching */
}

/* 000011A0-000012D4       .text get_cloth_anim_sub_factor__FP4cXyzP4cXyzP4cXyzP4cXyzf */
void get_cloth_anim_sub_factor(cXyz*, cXyz*, cXyz*, cXyz*, float) {
    /* Nonmatching */
}

/* 000012D4-00001624       .text get_cloth_anim_factor__FP17pirate_flag_classP4cXyzP4cXyzP4cXyzP4cXyzii */
void get_cloth_anim_factor(pirate_flag_class*, cXyz*, cXyz*, cXyz*, cXyz*, int, int) {
    /* Nonmatching */
}

/* 00001624-00001938       .text pirate_flag_move__FP17pirate_flag_class */
void pirate_flag_move(pirate_flag_class*) {
    /* Nonmatching */
}

/* 00001938-00001A38       .text daPirate_Flag_Execute__FP17pirate_flag_class */
static BOOL daPirate_Flag_Execute(pirate_flag_class*) {
    /* Nonmatching */
}

/* 00001A38-00001A40       .text daPirate_Flag_IsDelete__FP17pirate_flag_class */
static BOOL daPirate_Flag_IsDelete(pirate_flag_class*) {
    return TRUE;
}

/* 00001A40-00001A90       .text daPirate_Flag_Delete__FP17pirate_flag_class */
static BOOL daPirate_Flag_Delete(pirate_flag_class* i_this) {
    dComIfG_resDelete(&i_this->mPhs1, "Cloth");
    dComIfG_resDelete(&i_this->mPhs2, "ffKaizokusen");

    return TRUE;
}

/* 00001A90-00001C8C       .text daPirate_Flag_Create__FP10fopAc_ac_c */
static s32 daPirate_Flag_Create(fopAc_ac_c*) {
    /* Nonmatching */
}

static s32 daPirate_Flag_ToFore(pirate_flag_class*); // Unused
static s32 daPirate_Flag_ToBack(pirate_flag_class*); // Unused

static actor_method_class l_daPirate_Flag_Method = {
    (process_method_func)daPirate_Flag_Create,
    (process_method_func)daPirate_Flag_Delete,
    (process_method_func)daPirate_Flag_Execute,
    (process_method_func)daPirate_Flag_IsDelete,
    (process_method_func)daPirate_Flag_Draw,
};

actor_process_profile_definition g_profile_PIRATE_FLAG = {
    /* LayerID      */ fpcLy_CURRENT_e,
    /* ListID       */ 0x0007,
    /* ListPrio     */ fpcPi_CURRENT_e,
    /* ProcName     */ PROC_PIRATE_FLAG,
    /* Proc SubMtd  */ &g_fpcLf_Method.base,
    /* Size         */ sizeof(pirate_flag_class),
    /* SizeOther    */ 0,
    /* Parameters   */ 0,
    /* Leaf SubMtd  */ &g_fopAc_Method.base,
    /* Priority     */ 0x006A,
    /* Actor SubMtd */ &l_daPirate_Flag_Method,
    /* Status       */ fopAcStts_UNK4000_e | fopAcStts_UNK40000_e,
    /* Group        */ fopAc_ACTOR_e,
    /* CullType     */ fopAc_CULLBOX_0_e,
};
