//
// Generated by dtk
// Translation Unit: d_a_shand.cpp
//

#include "d/actor/d_a_shand.h"
#include "d/d_com_inf_game.h"
#include "d/d_procname.h"
#include "d/d_s_play.h"

/* 000000EC-00000114       .text __ct__13daShand_HIO_cFv */
daShand_HIO_c::daShand_HIO_c() {
    /* Nonmatching */
}

/* 00000114-00000194       .text hand_draw__FP11shand_class */
void hand_draw(shand_class* actor) {
    GXColor color = {0x50, 0x96, 0x96, 0xff};
    actor->mLineMat.update(0x14, color, &actor->tevStr);
    dComIfGd_set3DlineMat(&actor->mLineMat);
}

/* 00000194-000001E0       .text daShand_Draw__FP11shand_class */
static BOOL daShand_Draw(shand_class* actor) {
    dKy_getEnvlight().settingTevStruct(TEV_TYPE_ACTOR, &actor->eyePos, &actor->tevStr);
    hand_draw(actor);
    return TRUE;
}

/* 000001E0-0000052C       .text control1__FP11shand_class */
void control1(shand_class* actor) {
    actor->u31C[0].mPos = actor->current.pos;
    int i = 1;
    shand_s* shand_i = &actor->u31C[i];
    
    mDoMtx_YrotS(*calc_mtx, actor->current.angle.y);

    cXyz local94, cStack_a0, localac;
    local94.x = 0.0f;
    local94.y = actor->u2F8;
    local94.z = actor->u2FC;
    MtxPosition(&local94, &localac);
    cLib_addCalc2(&actor->u2F8, REG0_F(7), 1.0f, 0.1f);
    cLib_addCalc2(&actor->u2FC, REG0_F(8), 1.0f, 1.0f);
    local94.z = actor->u2F4;
    const float fVar1 = actor->u300;
    cXyz idk;
    for(i = 1; i < 19; i++, ++shand_i){
        idk.x = fVar1 * cM_ssin(actor->mExecuteCount * (REG0_S(5) + 1100) + i * (REG0_S(6) + 4000));
        idk.z =  fVar1 * cM_scos(actor->mExecuteCount * (REG0_S(7) + 800) + i * (REG0_S(8) + 4000));
        float fVar2 = (i < 15) ? 1.0f : 1.0f - (i - 15) * 0.2f;

        float fVar_x = shand_i->mPos.x - shand_i[-1].mPos.x + (localac.x * fVar2) + (idk.x * fVar2);
        float fVar_y = shand_i->mPos.y - shand_i[-1].mPos.y + localac.y;
        float fVar_z = shand_i->mPos.z - shand_i[-1].mPos.z + (localac.z * fVar2) + (idk.z * fVar2);

        int iVar2 = cM_atan2s(fVar_x, fVar_z);
        short iVar3 = -cM_atan2s(fVar_y, std::sqrtf(fVar_x * fVar_x + fVar_z * fVar_z));
        mDoMtx_YrotS(*calc_mtx, iVar2);
        mDoMtx_XrotM(*calc_mtx, iVar3);
        MtxPosition(&local94, &cStack_a0);
        shand_i->mPos = shand_i[-1].mPos + cStack_a0;
    }
}

/* 0000052C-00000740       .text control2__FP11shand_class */
void control2(shand_class* actor) {
    cXyz rel_offset, abs_offset;
    rel_offset.x = 0;
    rel_offset.y = 0;
    rel_offset.z = actor->u2F4;

    cLib_addCalc2(&actor->u31C[19].mPos.x, actor->u2D4.x, 1.0, actor->u2F0 * 50.0f);
    cLib_addCalc2(&actor->u31C[19].mPos.y, actor->u2D4.y, 1.0, actor->u2F0 * 50.0f);
    cLib_addCalc2(&actor->u31C[19].mPos.z, actor->u2D4.z, 1.0, actor->u2F0 * 50.0f);
    cLib_addCalc2(&actor->u2F0, 1.0, 1.0, 0.01);

    int i = 18;
    shand_s* shand_i = &actor->u31C[i];
    for(i = 18; i >= 1; i--, shand_i--){
        float delta_pos_x = shand_i->mPos.x - shand_i[1].mPos.x;
        float delta_pos_y = shand_i->mPos.y - shand_i[1].mPos.y;
        float delta_pos_z = shand_i->mPos.z - shand_i[1].mPos.z;
        int XZangle = cM_atan2s(delta_pos_x, delta_pos_z);
        short Yangle = -cM_atan2s(delta_pos_y, std::sqrtf(delta_pos_x * delta_pos_x + delta_pos_z * delta_pos_z));
        mDoMtx_YrotS(*calc_mtx, XZangle);
        mDoMtx_XrotM(*calc_mtx, Yangle);
        MtxPosition(&rel_offset, &abs_offset);
        shand_i->mPos = shand_i[1].mPos + abs_offset;
    }
}

/* 00000740-000007C4       .text control3__FP11shand_class */
void control3(shand_class*) {
    /* Nonmatching */
}

/* 000007C4-00000BAC       .text cut_control__FP11shand_class */
void cut_control(shand_class*) {
    /* Nonmatching */
}

/* 00000BAC-00000C30       .text cut_control3__FP11shand_class */
void cut_control3(shand_class*) {
    /* Nonmatching */
}

/* 00000C30-00000FF0       .text normal__FP11shand_class */
void normal(shand_class*) {
    /* Nonmatching */
}

/* 00001428-00001508       .text cut__FP11shand_class */
void cut(shand_class*) {
    /* Nonmatching */
}

/* 00001508-00001DAC       .text hand_move__FP11shand_class */
void hand_move(shand_class*) {
    /* Nonmatching */
}

/* 000021EC-0000225C       .text daShand_Execute__FP11shand_class */
static BOOL daShand_Execute(shand_class*) {
    /* Nonmatching */
}

/* 0000225C-00002264       .text daShand_IsDelete__FP11shand_class */
static BOOL daShand_IsDelete(shand_class*) {
    /* Nonmatching */
}

/* 00002264-000022D4       .text daShand_Delete__FP11shand_class */
static BOOL daShand_Delete(shand_class*) {
    /* Nonmatching */
}

/* 000022D4-00002360       .text useHeapInit__FP11shand_class */
void useHeapInit(shand_class*) {
    /* Nonmatching */
}

/* 00002360-00002380       .text daShand_solidHeapCB__FP10fopAc_ac_c */
static BOOL daShand_solidHeapCB(fopAc_ac_c*) {
    /* Nonmatching */
}

/* 00002380-00002630       .text daShand_Create__FP10fopAc_ac_c */
static s32 daShand_Create(fopAc_ac_c*) {
    /* Nonmatching */
}

static actor_method_class l_daShand_Method = {
    (process_method_func)daShand_Create,
    (process_method_func)daShand_Delete,
    (process_method_func)daShand_Execute,
    (process_method_func)daShand_IsDelete,
    (process_method_func)daShand_Draw,
};

actor_process_profile_definition g_profile_SHAND = {
    /* LayerID      */ fpcLy_CURRENT_e,
    /* ListID       */ 0x0003,
    /* ListPrio     */ fpcPi_CURRENT_e,
    /* ProcName     */ PROC_SHAND,
    /* Proc SubMtd  */ &g_fpcLf_Method.base,
    /* Size         */ sizeof(shand_class),
    /* SizeOther    */ 0,
    /* Parameters   */ 0,
    /* Leaf SubMtd  */ &g_fopAc_Method.base,
    /* Priority     */ 0x0095,
    /* Actor SubMtd */ &l_daShand_Method,
    /* Status       */ fopAcStts_UNK4000_e | fopAcStts_UNK40000_e,
    /* Group        */ fopAc_ENEMY_e,
    /* CullType     */ fopAc_CULLBOX_CUSTOM_e,
};
