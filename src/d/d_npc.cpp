//
// Generated by dtk
// Translation Unit: d_npc.cpp
//

#include "d/d_npc.h"
#include "d/d_com_inf_game.h"
#include "f_op/f_op_actor_mng.h"
#include "f_op/f_op_msg_mng.h"
#include "SSystem/SComponent/c_math.h"
#include "JSystem/JGeometry.h"

/* 8021A7B4-8021A858       .text angCalcS__14dNpc_JntCtrl_cFPssss */
void dNpc_JntCtrl_c::angCalcS(short*, short, short, short) {
    /* Nonmatching */
}

/* 8021A858-8021A884       .text limitter__14dNpc_JntCtrl_cFPsss */
void dNpc_JntCtrl_c::limitter(short*, short, short) {
    /* Nonmatching */
}

/* 8021A884-8021A97C       .text follow__14dNpc_JntCtrl_cFPsssi */
void dNpc_JntCtrl_c::follow(short*, short, short, int) {
    /* Nonmatching */
}

/* 8021A97C-8021AABC       .text move__14dNpc_JntCtrl_cFsi */
void dNpc_JntCtrl_c::move(short, int) {
    /* Nonmatching */
}

/* 8021AABC-8021AC6C       .text lookAtTarget__14dNpc_JntCtrl_cFPsP4cXyz4cXyzssb */
void dNpc_JntCtrl_c::lookAtTarget(short*, cXyz*, cXyz, short, short, bool) {
    /* Nonmatching */
}

/* 8021AC6C-8021ACA8       .text setParam__14dNpc_JntCtrl_cFsssssssss */
void dNpc_JntCtrl_c::setParam(short, short, short, short, short, short, short, short, short) {
    /* Nonmatching */
}

/* 8021ACA8-8021ACBC       .text setInfDrct__14dNpc_PathRun_cFP5dPath */
void dNpc_PathRun_c::setInfDrct(dPath*) {
    /* Nonmatching */
}

/* 8021ACBC-8021AD1C       .text setInf__14dNpc_PathRun_cFUcScUc */
void dNpc_PathRun_c::setInf(unsigned char, signed char, unsigned char) {
    /* Nonmatching */
}

/* 8021AD1C-8021AD58       .text nextPath__14dNpc_PathRun_cFSc */
void dNpc_PathRun_c::nextPath(signed char) {
    /* Nonmatching */
}

/* 8021AD58-8021ADD0       .text getPoint__14dNpc_PathRun_cFUc */
void dNpc_PathRun_c::getPoint(unsigned char) {
    /* Nonmatching */
}

/* 8021ADD0-8021AFA8       .text chkPointPass__14dNpc_PathRun_cF4cXyzb */
void dNpc_PathRun_c::chkPointPass(cXyz, bool) {
    /* Nonmatching */
}

/* 8021AFA8-8021AFEC       .text incIdx__14dNpc_PathRun_cFv */
void dNpc_PathRun_c::incIdx() {
    /* Nonmatching */
}

/* 8021AFEC-8021B030       .text incIdxLoop__14dNpc_PathRun_cFv */
void dNpc_PathRun_c::incIdxLoop() {
    /* Nonmatching */
}

/* 8021B030-8021B0AC       .text incIdxAuto__14dNpc_PathRun_cFv */
void dNpc_PathRun_c::incIdxAuto() {
    /* Nonmatching */
}

/* 8021B0AC-8021B0F0       .text decIdx__14dNpc_PathRun_cFv */
void dNpc_PathRun_c::decIdx() {
    /* Nonmatching */
}

/* 8021B0F0-8021B134       .text decIdxLoop__14dNpc_PathRun_cFv */
void dNpc_PathRun_c::decIdxLoop() {
    /* Nonmatching */
}

/* 8021B134-8021B1B0       .text decIdxAuto__14dNpc_PathRun_cFv */
void dNpc_PathRun_c::decIdxAuto() {
    /* Nonmatching */
}

/* 8021B1B0-8021B224       .text nextIdx__14dNpc_PathRun_cFv */
void dNpc_PathRun_c::nextIdx() {
    /* Nonmatching */
}

/* 8021B224-8021B298       .text nextIdxAuto__14dNpc_PathRun_cFv */
void dNpc_PathRun_c::nextIdxAuto() {
    /* Nonmatching */
}

/* 8021B298-8021B328       .text absIdx__14dNpc_PathRun_cFUcUc */
void dNpc_PathRun_c::absIdx(unsigned char, unsigned char) {
    /* Nonmatching */
}

/* 8021B328-8021B348       .text maxPoint__14dNpc_PathRun_cFv */
void dNpc_PathRun_c::maxPoint() {
    /* Nonmatching */
}

/* 8021B348-8021B384       .text pointArg__14dNpc_PathRun_cFUc */
void dNpc_PathRun_c::pointArg(unsigned char) {
    /* Nonmatching */
}

/* 8021B384-8021B514       .text setNearPathIndx__14dNpc_PathRun_cFP4cXyzf */
void dNpc_PathRun_c::setNearPathIndx(cXyz*, float) {
    /* Nonmatching */
}

/* 8021B514-8021B670       .text setNearPathIndxMk__14dNpc_PathRun_cFP4cXyz */
void dNpc_PathRun_c::setNearPathIndxMk(cXyz*) {
    /* Nonmatching */
}

/* 8021B670-8021B818       .text setNearPathIndxMk2__14dNpc_PathRun_cFP4cXyzUcUc */
void dNpc_PathRun_c::setNearPathIndxMk2(cXyz*, unsigned char, unsigned char) {
    /* Nonmatching */
}

/* 8021B818-8021B95C       .text chkInside__14dNpc_PathRun_cFP4cXyz */
void dNpc_PathRun_c::chkInside(cXyz*) {
    /* Nonmatching */
}

void dNpc_EventCut_c::setActorInfo(char* staffName, fopAc_ac_c* pActor) {
    mpEvtStaffName = staffName;
    mpActor = pActor;
    mTargetActorPos.set(0.0f, 0.0f, 0.0f);
    mOffsetPos.set(0.0f, 0.0f, 0.0f);
    mPos.set(0.0f, 0.0f, 0.0f);
    mCurActIdx = -1;
}

void dNpc_EventCut_c::setActorInfo2(char* staffName, fopNpc_npc_c* pActor) {
    mpEvtStaffName = staffName;
    mpActor = pActor;
    mpTalkActor = pActor;
    mTargetActorPos.set(0.0f, 0.0f, 0.0f);
    mOffsetPos.set(0.0f, 0.0f, 0.0f);
    mPos.set(0.0f, 0.0f, 0.0f);
    mCurActIdx = -1;
}

void dNpc_setAnmIDRes(mDoExt_McaMorf*, int, float, float, int, int, const char*) {
    /* Nonmatching */
}

/* 8021BABC-8021BBA8       .text dNpc_setAnmFNDirect__FP14mDoExt_McaMorfiffPcPcPCc */
void dNpc_setAnmFNDirect(mDoExt_McaMorf*, int, float, float, char*, char*, const char*) {
    /* Nonmatching */
}

/* 8021BBA8-8021BC8C       .text dNpc_setAnm__FP14mDoExt_McaMorfiffiiPCc */
void dNpc_setAnm(mDoExt_McaMorf*, int, float, float, int, int, const char*) {
    /* Nonmatching */
}

/* 8021BC8C-8021BD2C       .text dNpc_setShadowModel__FP8J3DModelP12J3DModelDataP8J3DModel */
void dNpc_setShadowModel(J3DModel*, J3DModelData*, J3DModel*) {
    /* Nonmatching */
}

cXyz dNpc_playerEyePos(f32) {
    /* Nonmatching */
}

/* 8021BDE8-8021BEC4       .text dNpc_calc_DisXZ_AngY__F4cXyz4cXyzPfPs */
void dNpc_calc_DisXZ_AngY(cXyz, cXyz, float*, short*) {
    /* Nonmatching */
}

/* 8021BEC4-8021BF30       .text dNpc_chkArasoi__Fv */
void dNpc_chkArasoi() {
    /* Nonmatching */
}

bool dNpc_chkLetterPassed() {

}

void fopNpc_npc_c::setCollision(f32 radius, f32 height) {
    mCyl.SetC(current.pos);
    mCyl.SetR(radius);
    mCyl.SetH(height);
    dComIfG_Ccsp()->Set(&mCyl);
}

u16 fopNpc_npc_c::talk(int param_1) {
    u16 mode = 0xFF;

    if(mCurrMsgBsPcId == 0xFFFFFFFF) {
        if(param_1 == 1) {
            mCurrMsgID = getMsg();
        }

        mCurrMsgBsPcId = fopMsgM_messageSet(mCurrMsgID, this);
        mpCurrMsg = 0;
    }
    else {
        if(mpCurrMsg) {
            mode = mpCurrMsg->mMode;
            if(mode == dNpcMsgStts_MSG_DISPLAYED_e) {
                mpCurrMsg->mMode = next_msgStatus(&mCurrMsgID);
                if(mpCurrMsg->mMode == dNpcMsgStts_MSG_CONTINUES_e) {
                    fopMsgM_messageSet(mCurrMsgID);
                }
            }
            else if (mode == dNpcMsgStts_BOX_CLOSED_e) {
                mpCurrMsg->mMode = dNpcMsgStts_MSG_DESTROYED_e;
                mCurrMsgBsPcId = -1;
            }

            anmAtr(mode);
        }
        else {
            mpCurrMsg = fopMsgM_SearchByID(mCurrMsgBsPcId);
        }
    }

    return mode;
}

/* 8021C120-8021C238       .text dNpc_setAnm_2__FP14mDoExt_McaMorfiffiiPCc */
void dNpc_setAnm_2(mDoExt_McaMorf*, int, float, float, int, int, const char*) {
    /* Nonmatching */
}

/* 8021C238-8021C2E8       .text swing_vertical_init__14dNpc_HeadAnm_cFsssi */
void dNpc_HeadAnm_c::swing_vertical_init(short, short, short, int) {
    /* Nonmatching */
}

/* 8021C2E8-8021C3C8       .text swing_vertical__14dNpc_HeadAnm_cFv */
void dNpc_HeadAnm_c::swing_vertical() {
    /* Nonmatching */
}

/* 8021C3C8-8021C478       .text swing_horizone_init__14dNpc_HeadAnm_cFsssi */
void dNpc_HeadAnm_c::swing_horizone_init(short, short, short, int) {
    /* Nonmatching */
}

/* 8021C478-8021C55C       .text swing_horizone__14dNpc_HeadAnm_cFv */
void dNpc_HeadAnm_c::swing_horizone() {
    /* Nonmatching */
}

/* 8021C55C-8021C5D8       .text move__14dNpc_HeadAnm_cFv */
void dNpc_HeadAnm_c::move() {
    /* Nonmatching */
}

/* 8021C5D8-8021C620       .text chkLim__14dNpc_JntCtrl_cFsii */
void dNpc_JntCtrl_c::chkLim(short, int, int) {
    /* Nonmatching */
}

/* 8021C620-8021C6D8       .text turn_fromBackbone2Head__14dNpc_JntCtrl_cFsPsPsb */
void dNpc_JntCtrl_c::turn_fromBackbone2Head(short, short*, short*, bool) {
    /* Nonmatching */
}

/* 8021C6D8-8021C780       .text turn_fromHead2Backbone__14dNpc_JntCtrl_cFsPsPs */
void dNpc_JntCtrl_c::turn_fromHead2Backbone(short, short*, short*) {
    /* Nonmatching */
}

/* 8021C780-8021C7D0       .text follow_current__14dNpc_JntCtrl_cFPss */
void dNpc_JntCtrl_c::follow_current(short*, short) {
    /* Nonmatching */
}

/* 8021C7D0-8021CAB8       .text lookAtTarget_2__14dNpc_JntCtrl_cFPsP4cXyz4cXyzssb */
void dNpc_JntCtrl_c::lookAtTarget_2(short*, cXyz*, cXyz, short, short, bool) {
    /* Nonmatching */
}

bool dNpc_chkAttn(fopAc_ac_c* i_this, cXyz destPos, float param_3, float param_4, float param_5, bool param_6) {
    s16 angle = cLib_targetAngleY(&i_this->current.pos, &destPos);
    cXyz temp = i_this->current.pos - destPos;
    f32 dist = sqrtf(temp.getMagXZ());
    s16 angle_diff = angle - i_this->current.angle.y;

    if(359.0f < param_5) {
        param_5 = 359.0f;
    }
    if (param_5 < 0.0f) {
        param_5 = 0.0f;
    }
    if(param_6) {
        param_3 += param_4;
    }

    bool ret = false;
    if(dist <= param_3 && abs(angle_diff) <= cM_deg2s(param_5)) {
        ret = true;
    }

    return ret;
}

bool dNpc_EventCut_c::cutProc() {
    static char* action_table[] = {
        "WAIT",
        "TURN_TO_ACTOR",
        "MOVE_TO_ACTOR",
        "TURN_TO_POS",
        "MOVE_TO_POS",
        "TALK_MSG",
        "CONTINUE_TALK"
    };

    if(mpEvtStaffName == 0 || mpActor == 0) {
        return false;
    }
    else {
        mEvtStaffId = dComIfGp_evmng_getMyStaffId(mpEvtStaffName, 0, 0);
        if(mEvtStaffId == -1) {
            return false;
        }
        else {
            typedef void(dNpc_EventCut_c::*cut_func_t)(void);
            struct cut_entry_t {
                cut_func_t start;
                cut_func_t proc;
            };

            static cut_entry_t cut_tbl[] = {
                {
                    &dNpc_EventCut_c::cutWaitStart,
                    &dNpc_EventCut_c::cutWaitProc,
                },
                {
                    &dNpc_EventCut_c::cutTurnToActorStart,
                    &dNpc_EventCut_c::cutTurnToActorProc,
                },
                {
                    &dNpc_EventCut_c::cutMoveToActorStart,
                    &dNpc_EventCut_c::cutMoveToActorProc,
                },
                {
                    &dNpc_EventCut_c::cutTurnToPosStart,
                    &dNpc_EventCut_c::cutTurnToPosProc,
                },
                {
                    &dNpc_EventCut_c::cutMoveToPosStart,
                    &dNpc_EventCut_c::cutMoveToPosProc,
                },
                {
                    &dNpc_EventCut_c::cutTalkMsgStart,
                    &dNpc_EventCut_c::cutTalkMsgProc,
                },
                {
                    &dNpc_EventCut_c::cutContinueTalkStart,
                    &dNpc_EventCut_c::cutTalkMsgProc,
                },
            };

            mCurActIdx = dComIfGp_evmng_getMyActIdx(mEvtStaffId, action_table, 7, 1, 0);
            if(mCurActIdx == -1) {
                return false;
            }
            else {
                if(dComIfGp_evmng_getIsAddvance(mEvtStaffId)) {
                    mbAttention = 0;
                    (this->*cut_tbl[mCurActIdx].start)();
                }
                
                (this->*cut_tbl[mCurActIdx].proc)();
                return 1;
            }
        }
    }
}

void dNpc_EventCut_c::cutWaitStart() {
    u32* timer = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "Timer");
    if(timer) {
        mTimer = (s16)*timer;
    }
    else {
        mTimer = 0;
    }
}

void dNpc_EventCut_c::cutWaitProc() {
    if(cLib_calcTimer(&mTimer) == 0) {
        dComIfGp_evmng_cutEnd(mEvtStaffId);
    }
}

void dNpc_EventCut_c::cutTurnToActorStart() {
    mpActorName = dComIfGp_evmng_getMyStringP(mEvtStaffId, "ActorName");

    u32* set = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "SetId");
    if(set) {
        mSetID = *set;
    }
    else {
        mSetID = 0;
    }

    Vec* pos = dComIfGp_evmng_getMyVec3dP(mEvtStaffId, "OffsetPos");
    if(pos) {
        mOffsetPos = *pos;
    }
    else {
        mOffsetPos.set(0.0f, 0.0f, 0.0f);
    }

    u32* turnType = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "TurnType");
    if(turnType) {
        mTurnType = *turnType;
    }
    else {
        mTurnType = 1;
    }

    u32* timer = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "Timer");
    if(timer) {
        mTimer = (s16)*timer;
    }
    else {
        mTimer = 1;
    }

    u32* speed = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "TurnSpeed");
    if(speed) {
        mTurnSpeed = *speed;
    }
    else {
        mTurnSpeed = 0;
    }

    u32* angle = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "AddAngle");
    if(angle == 0) {
        mAddAngle = 0;
    }
    else {
        mAddAngle = *angle;
    }

    f32* dist = dComIfGp_evmng_getMyFloatP(mEvtStaffId, "DelDistance");
    if(dist == 0) {
        pDelDistance = 0.0f;
    }
    else {
        pDelDistance = *dist;
    }

    u32* noTurn = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "NoTurn");
    if(noTurn) {
        mbNoTurn = 1;
    }
    else {
        mbNoTurn = 0;
    }

    field_0x44 = 0;
}

void dNpc_EventCut_c::cutTurnToActorProc() {
    if(mSetID != 0) {
        mTargetActorPos.set(0.0f, 0.0f, 0.0f);
        fopAcM_Search((fopAcIt_JudgeFunc)&findActorCallBack, this);
    }
    else {
        if(mpActorName == 0 || dEvmng_strcmp(mpActorName, "Player") == 0) {
            mpTargetActor = dComIfGp_getPlayer(0);
        }
        else {
            mTargetActorPos.set(0.0f, 0.0f, 0.0f);
            fopAcM_Search((fopAcIt_JudgeFunc)&findActorCallBack, this);
        }
    }

    if(field_0x68 != 0) {
        switch(mTurnType) {
            case 2:
                field_0x68[0xA] = 1;
            case 1:
                field_0x68[0xC] = 0;
                break;
            case 0:
                field_0x68[0xC] = 1;
                break;
            default:
                field_0x68[0xC] = 0;
                break;
        }
    }

    if(mpTargetActor == 0) {
        dComIfGp_evmng_cutEnd(mEvtStaffId);
    }
    if(mpActorName == 0 || dEvmng_strcmp(mpActorName, "Player") == 0) {
        mPos = dNpc_playerEyePos(0.0f) + mOffsetPos;
    }
    else {
        if(mAddAngle == 0 && pDelDistance != 0.0f) {
            mPos = mpTargetActor->current.pos;
            u16 angle = mpTargetActor->shape_angle.y + mAddAngle;
        }
        else {
            mPos = mpTargetActor->current.pos + mOffsetPos;
        }
    }

    mbAttention = 1;

    //not sure what this section is doing
    s16 tAngle = cLib_targetAngleY(&mpActor->current.pos, &mPos);
    u32 temp = abs(tAngle - fopAcM_GetAngle_p(mpActor).y);
    if(fabsf2(field_0x44) == temp && temp < 5376.0f) {
        cLib_calcTimer(&mTimer);
    }

    if(mTimer == 0) {
        mTurnSpeed = 0;
        dComIfGp_evmng_cutEnd(mEvtStaffId);
    }
    
    field_0x44 = fabsf2(tAngle - mpActor->current.angle.y);
}

void dNpc_EventCut_c::cutMoveToActorStart() {
    mpActorName = dComIfGp_evmng_getMyStringP(mEvtStaffId, "ActorName");
    u32* set = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "SetId");
    f32* speed = dComIfGp_evmng_getMyFloatP(mEvtStaffId, "Speed");
    f32* dist = dComIfGp_evmng_getMyFloatP(mEvtStaffId, "DelDistance");
    Vec* offs = dComIfGp_evmng_getMyVec3dP(mEvtStaffId, "OffsetPos");
    u32* attn = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "Attention");
    u32* noTurn = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "NoTurn");
    u32* angle = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "ShapeAngle");

    if(noTurn == 0) {
        mbNoTurn = 0;
    }
    else {
        mbNoTurn = 1;
    }

    if(attn == 0) {
        mbAttention = 0;
    }
    else {
        mbAttention = 1;
    }

    if(offs == 0) {
        mOffsetPos.set(0.0f, 0.0f, 0.0f);
    }
    else {
        mOffsetPos = *offs;
    }

    if(set == 0) {
        mSetID = 0;
    }
    else {
        mSetID = *set;
    }

    if(speed == 0) {
        mSpeed = 2.0f;
    }
    else {
        mSpeed = *speed;
    }

    if(dist == 0) {
        pDelDistance = 0.0f;
    }
    else {
        pDelDistance = *dist;
    }

    if(angle == 0) {
        mAddAngle = 0;
    }
    else {
        mAddAngle = *angle;
    }
}

void dNpc_EventCut_c::cutMoveToActorProc() {
    if(mSetID != 0) {
        mTargetActorPos.set(0.0f, 0.0f, 0.0f);
        fopAcM_Search((fopAcIt_JudgeFunc)&findActorCallBack, this);
    }
    else {
        if(mpActorName == 0 || dEvmng_strcmp(mpActorName, "Player") == 0) {
            mpTargetActor = dComIfGp_getPlayer(0);
        }
        else {
            mTargetActorPos.set(0.0f, 0.0f, 0.0f);
            fopAcM_Search((fopAcIt_JudgeFunc)&findActorCallBack, this);
        }
    }

    if(mpTargetActor == 0) {
        dComIfGp_evmng_cutEnd(mEvtStaffId);
    }

    cXyz temp = mpTargetActor->current.pos + mOffsetPos;
    u16 angle = fopAcM_searchActorAngleY(mpActor, mpTargetActor);
    if(mAddAngle != 0) {
        angle = mpTargetActor->shape_angle.y + mAddAngle;
    }
    //sin/cos table stuff
    if(mSpeed == 0.0f) {
        mpActor->current.pos = temp;
        dComIfGp_evmng_cutEnd(mEvtStaffId);
    }

    //more math stuff
}

fopAc_ac_c* dNpc_EventCut_c::findActorCallBack(fopAc_ac_c* pActor, void* pData) {
    dNpc_EventCut_c* cut = static_cast<dNpc_EventCut_c*>(pData);

    if(cut == 0) {
        pActor = 0;
    }
    else if(cut->mSetID == 0 || pActor->mSetID != cut->mSetID) {
        if(cut->mpActorName == 0) {
            pActor = 0;
        }
        else {
            //if(dStage_searchName(cut->mpActorName) == 0) {
            //    pActor = 0;
            //}
            //else {
            //}
        }
    }
    else {
        cut->mTargetActorPos = pActor->current.pos;
        cut->mpTargetActor = pActor;
    }

    return 0;
}

void dNpc_EventCut_c::cutTurnToPosStart() {
    Vec* pos = dComIfGp_evmng_getMyVec3dP(mEvtStaffId, "Pos");
    if(pos) {
        mPos = *pos;
    }
    else {
        mPos.set(0.0f, 0.0f, 0.0f);
    }

    u32* turnType = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "TurnType");
    if(turnType) {
        mTurnType = *turnType;
    }
    else {
        mTurnType = 1;
    }

    u32* timer = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "Timer");
    if(timer) {
        mTimer = (s16)*timer;
    }
    else {
        mTimer = 1;
    }

    u32* speed = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "TurnSpeed");
    if(speed) {
        mTurnSpeed = *speed;
    }
    else {
        mTurnSpeed = 0;
    }
    
    u32* noTurn = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "NoTurn");
    if(noTurn) {
        mbNoTurn = 1;
    }
    else {
        mbNoTurn = 0;
    }

    u32* angle = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "AddAngle");
    if(angle == 0) {
        mAddAngle = 0;
    }
    else {
        mAddAngle = *angle;
    }

    field_0x44 = 0;
}

void dNpc_EventCut_c::cutTurnToPosProc() {
    s16 tAngle = cLib_targetAngleY(&mpActor->current.pos, &mPos);
    mbAttention = 1;

    if(field_0x68 != 0) {
        switch(mTurnType) {
            case 2:
                field_0x68[0xA] = 1;
            case 1:
                field_0x68[0xC] = 0;
                break;
            case 0:
                field_0x68[0xC] = 1;
                break;
            default:
                field_0x68[0xC] = 0;
                break;
        }
    }

    //not sure what this section is doing
    u32 temp = abs(tAngle - fopAcM_GetAngle_p(mpActor).y);
    if(fabsf2(field_0x44) == temp && temp < 5376.0f) {
        cLib_calcTimer(&mTimer);
    }

    if(mTimer == 0) {
        mTurnSpeed = 0;
        dComIfGp_evmng_cutEnd(mEvtStaffId);
    }
    
    field_0x44 = fabsf2(tAngle - mpActor->current.angle.y);
}

void dNpc_EventCut_c::cutMoveToPosStart() {
    Vec* pos = dComIfGp_evmng_getMyVec3dP(mEvtStaffId, "Pos");
    f32* speed = dComIfGp_evmng_getMyFloatP(mEvtStaffId, "Speed");
    f32* dist = dComIfGp_evmng_getMyFloatP(mEvtStaffId, "DelDistance");
    u32* attn = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "Attention");
    u32* noTurn = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "NoTurn");
    u32* angle = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "AddAngle");

    if(noTurn == 0) {
        mbNoTurn = 0;
    }
    else {
        mbNoTurn = 1;
    }

    if(pos == 0) {
        mPos.set(0.0f, 0.0f, 0.0f);
    }
    else {
        mPos = *pos;
    }
    
    if(attn == 0) {
        mbAttention = 0;
    }
    else {
        mbAttention = 1;
    }

    if(speed == 0) {
        mSpeed = 2.0f;
    }
    else {
        mSpeed = *speed;
    }

    if(dist == 0) {
        pDelDistance = 0.0f;
    }
    else {
        pDelDistance = *dist;
    }

    if(angle == 0) {
        mAddAngle = 0;
    }
    else {
        mAddAngle = *angle;
    }
}

/* 8021E168-8021E338       .text cutMoveToPosProc__15dNpc_EventCut_cFv */
void dNpc_EventCut_c::cutMoveToPosProc() {
    /* Nonmatching */
}

void dNpc_EventCut_c::cutTalkMsgStart() {
    if(mpTalkActor != 0) {
        u32* attn = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "Attention");
        if(attn == 0) {
            mbAttention = 0;
        }
        else {
            mbAttention = 1;
        }

        u32* firstMsg = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "msg_num");
        u32* endMsg = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "end_msg");
        if(firstMsg == 0) {
            mpTalkActor->mCurrMsgID = 0;
        }
        else {
            mpTalkActor->mCurrMsgID = *firstMsg;
        }
        if(endMsg) {
            mpTalkActor->mEndMsgID = *endMsg;
        }
        else {
            mpTalkActor->mEndMsgID = -1;
        }

        field_0x52 = 1;
    }
}

void dNpc_EventCut_c::cutContinueTalkStart() {
    if(mpTalkActor != 0) {
        u32* endMsg = dComIfGp_evmng_getMyIntegerP(mEvtStaffId, "end_num");
        if(endMsg) {
            mpTalkActor->mEndMsgID = *endMsg;
        }
        else {
            mpTalkActor->mEndMsgID = -1;
        }
    }
}

void dNpc_EventCut_c::cutTalkMsgProc() {
    if(mpTalkActor == 0 || field_0x52 == 0) {
        dComIfGp_evmng_cutEnd(mEvtStaffId);
    }
    else {
        u16 status = mpTalkActor->talk(0);
        if(status == dNpcMsgStts_BOX_CLOSED_e) {
            field_0x52 = 0;
            dComIfGp_evmng_cutEnd(mEvtStaffId);
        }
        else if((status == 2 || status == 6) && mpTalkActor->mEndMsgID == mpTalkActor->mCurrMsgID) {
            mpTalkActor->mEndMsgID = -1;
            dComIfGp_evmng_cutEnd(mEvtStaffId);
        }
    }
}

