//
// Generated by dtk
// Translation Unit: d_ovlp_fade4.cpp
//

#include "d/d_ovlp_fade4.h"
#include "d/d_com_inf_game.h"
#include "d/d_procname.h"
#include "f_op/f_op_overlap.h"
#include "m_Do/m_Do_graphic.h"
#include "new.h"

/* 80224390-80224484       .text init__15dDlst_2DtEff1_cF8_GXColor */
void dDlst_2DtEff1_c::init(_GXColor) {
    /* Nonmatching */
}

/* 80224484-802246CC       .text draw__15dDlst_2DtEff1_cFv */
void dDlst_2DtEff1_c::draw() {
    /* Nonmatching */
}

/* 802246CC-80224748       .text draw__17dDlst_snapShot2_cFv */
void dDlst_snapShot2_c::draw() {
    /* Nonmatching */
}

/* 80224748-80224884       .text dDlst_setResTimgObj__FPC7ResTIMGP9_GXTexObjPvUlUl */
void dDlst_setResTimgObj(const ResTIMG*, _GXTexObj*, void*, u32, u32) {
    /* Nonmatching */
}

/* 80224884-802249C4       .text cnvAddress__FffPfPf */
void cnvAddress(f32, f32, f32*, f32*) {
    /* Nonmatching */
}

/* 802249C4-80224CC4       .text draw__14dDlst_2Dt_Sp_cFv */
void dDlst_2Dt_Sp_c::draw() {
    /* Nonmatching */
}

/* 80224CC4-80224DBC       .text init__14dDlst_2Dt_Sp_cFP7ResTIMGffff8_GXColor */
void dDlst_2Dt_Sp_c::init(ResTIMG*, f32, f32, f32, f32, _GXColor) {
    /* Nonmatching */
}

/* 80224DBC-80224F98       .text __ct__10dOvlpFd4_cFv */
dOvlpFd4_c::dOvlpFd4_c() {
    /* Nonmatching */
    field_0x2ac = 1;
    field_0xcc = &dOvlpFd4_c::execFirstSnap;
    field_0xd8 = &dOvlpFd4_c::drawFadeOut;
    if (base.mProcName == PROC_OVERLAP4) {
        field_0xfc.init(mDoGph_gInf_c::mFrameBufferTimg, 0.0f, 0.0f, 640.0f, 480.0f, g_saftyWhiteColor);
    } else {
        GXColor tmp = {0, 0, 0, 0};
        field_0xfc.init(mDoGph_gInf_c::mFrameBufferTimg, 0.0f, 0.0f, 640.0f, 480.0f, tmp);
    }
    field_0x148.init(mDoGph_gInf_c::mFrameBufferTimg, 0.0f, 0.0f, 640.0f, 480.0f, g_whiteColor);
    field_0xe4.field_0x4 = mDoGph_gInf_c::mFrameBufferTex;
    field_0xe4.field_0x8 = 640;
    field_0xe4.field_0xa = 480;
    field_0xf0.field_0x4 = mDoGph_gInf_c::mFrameBufferTex;
    field_0xf0.field_0x8 = 640;
    field_0xf0.field_0xa = 480;
    field_0x194.init(g_saftyWhiteColor);
    dComIfGp_2dShowOff();
    field_0x2b0 = 2;
    field_0x2ae = 39;
    field_0x2b4 = 0.0f;
    field_0x2ad = 0;
}

/* 80224F98-80225060       .text drawFadeOut__10dOvlpFd4_cFv */
void dOvlpFd4_c::drawFadeOut() {
    /* Nonmatching */
}

/* 80225060-8022509C       .text drawFadeIn__10dOvlpFd4_cFv */
void dOvlpFd4_c::drawFadeIn() {
    /* Nonmatching */
}

/* 8022509C-802251FC       .text execFirstSnap__10dOvlpFd4_cFv */
void dOvlpFd4_c::execFirstSnap() {
    /* Nonmatching */
}

/* 802251FC-802253C4       .text execFadeOut__10dOvlpFd4_cFv */
void dOvlpFd4_c::execFadeOut() {
    /* Nonmatching */
}

/* 802253C4-80225528       .text execNextSnap__10dOvlpFd4_cFv */
void dOvlpFd4_c::execNextSnap() {
    /* Nonmatching */
}

/* 80225528-802255F4       .text execFadeIn__10dOvlpFd4_cFv */
void dOvlpFd4_c::execFadeIn() {
    /* Nonmatching */
}

/* 802255F4-80225658       .text dOvlpFd4_Draw__FP10dOvlpFd4_c */
static s32 dOvlpFd4_Draw(dOvlpFd4_c* i_this) {
    void (dOvlpFd4_c::*tmp)() = i_this->field_0xd8;
    if (tmp) {
        (i_this->*i_this->field_0xd8)();
    }
    return 1;
}

/* 80225658-80225684       .text dOvlpFd4_Execute__FP10dOvlpFd4_c */
static s32 dOvlpFd4_Execute(dOvlpFd4_c* i_this) {
    (i_this->*i_this->field_0xcc)();
    return 1;
}

/* 80225684-8022568C       .text dOvlpFd4_IsDelete__FP10dOvlpFd4_c */
static s32 dOvlpFd4_IsDelete(dOvlpFd4_c*) {
    return 1;
}

/* 8022568C-80225694       .text dOvlpFd4_Delete__FP10dOvlpFd4_c */
static s32 dOvlpFd4_Delete(dOvlpFd4_c*) {
    return 1;
}

/* 80225694-802256C0       .text dOvlpFd4_Create__FPv */
static s32 dOvlpFd4_Create(void* i_this) {
    new (i_this) dOvlpFd4_c();
    return cPhs_COMPLEATE_e;
}

overlap_method_class l_dOvlpFd4_Method = {
    (process_method_func)dOvlpFd4_Create,
    (process_method_func)dOvlpFd4_Delete,
    (process_method_func)dOvlpFd4_Execute,
    (process_method_func)dOvlpFd4_IsDelete,
    (process_method_func)dOvlpFd4_Draw,
};

overlap_process_profile_definition g_profile_OVERLAP4 = {
    fpcLy_ROOT_e,
    2,
    fpcPi_CURRENT_e,
    PROC_OVERLAP4,
    &g_fpcLf_Method.base,
    sizeof(dOvlpFd4_c),
    0,
    0,
    &g_fopOvlp_Method,
    0x1E5,
    &l_dOvlpFd4_Method,
};

overlap_process_profile_definition g_profile_OVERLAP5 = {
    fpcLy_ROOT_e,
    2,
    fpcPi_CURRENT_e,
    PROC_OVERLAP5,
    &g_fpcLf_Method.base,
    sizeof(dOvlpFd4_c),
    0,
    0,
    &g_fopOvlp_Method,
    0x1E6,
    &l_dOvlpFd4_Method,
};
